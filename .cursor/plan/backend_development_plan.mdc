---
description: 
globs: 
alwaysApply: false
---
# Структура и задачи Backend проекта (Django)

# Важно!
При выполнении каждой задачи, отмечай в этом файле что уже сделано, что бы повторно не делать!

### Данные для подключения MySQL
- database_name = eisec_fastapi
- user_name = eisec_fastapi
- password = jA&TJA8x5rBt
- server = eisec.beget.tech

## 1. Техническая архитектура ✅ ВЫПОЛНЕНО

### Основной стек:
- **Django 5.0** + **Python 3.11+** ✅
- **MySQL 5.7** в качестве основной БД ✅
- **Django REST Framework** для API ✅
- **Django Admin** с кастомизацией + TailwindCSS ⏳ В ПРОЦЕССЕ
- **JWT Authentication** (djangorestframework-simplejwt) ✅
- **Celery + Redis** для фоновых задач ✅ НАСТРОЕНО
- **Docker** для контейнеризации ⏳ ПЛАНИРУЕТСЯ

### Дополнительные пакеты: ✅ УСТАНОВЛЕНЫ
```python
# requirements.txt
Django==5.0.6
djangorestframework==3.15.1
django-cors-headers==4.1.0
djangorestframework-simplejwt==5.2.2
django-filter==23.2
drf-yasg==1.21.7  # Swagger
mysqlclient==2.2.4
Pillow==10.3.0
django-extensions==3.2.3
django-debug-toolbar==4.1.0
celery==5.3.0
redis==4.6.0
django-storages==1.14.2  # для S3/облачного хранения
django-mptt==0.14.0  # для иерархических структур
django-taggit==5.0.1  # для тегов
whitenoise==6.5.0  # для статических файлов
gunicorn==21.2.0
python-decouple==3.8
```

## 2. Структура проекта ✅ СОЗДАНА

```
project_root/
├── backend/ ✅
│   ├── core/ ✅                   # Основные настройки Django
│   │   ├── settings/ ✅
│   │   │   ├── __init__.py ✅
│   │   │   ├── base.py ✅
│   │   │   ├── development.py ✅
│   │   │   ├── production.py ✅
│   │   │   └── testing.py ✅
│   │   ├── urls.py ✅
│   │   ├── wsgi.py ✅
│   │   └── asgi.py ✅
│   ├── apps/ ✅
│   │   ├── accounts/ ✅           # Пользователи и авторизация
│   │   ├── sites/ ✅              # Управление сайтами
│   │   ├── posts/ ✅              # Посты
│   │   ├── pages/ ✅              # Страницы
│   │   ├── dynamic_models/ ✅     # Динамические модели
│   │   ├── common/ ✅             # Общие компоненты
│   │   └── api/ ✅                # API endpoints
│   ├── media/ ✅                  # Загруженные файлы
│   ├── static/ ✅                 # Статические файлы
│   ├── templates/ ✅              # Шаблоны (включая админку)
│   ├── requirements/ ✅
│   │   ├── base.txt ✅
│   │   ├── development.txt ✅
│   │   └── production.txt ✅
│   ├── docker/ ⏳
│   ├── scripts/ ⏳                # Скрипты управления
│   ├── locale/ ⏳                 # Переводы
│   ├── .env ✅
│   ├── README.md ✅
│   └── manage.py ✅
├── docker-compose.yml ⏳
├── Dockerfile ⏳
└── README.md ⏳
```

## 3. Модели данных ✅ СОЗДАНЫ

### 3.1 Приложение accounts ✅ ВЫПОЛНЕНО
- Role модель с константами ролей ✅
- CustomUser модель наследующая AbstractUser ✅ 
- Связи между моделями настроены ✅
- Type hints добавлены ✅

### 3.2 Приложение sites ✅ ВЫПОЛНЕНО  
- Site модель с полными настройками ✅
- Поля для изображений ✅
- SEO настройки ✅
- Методы can_user_access, get_posts_count ✅

### 3.3 Приложение posts ✅ ВЫПОЛНЕНО
- Post модель с SEO полями ✅
- Автоматическая генерация slug ✅
- Счетчик просмотров ✅
- Время чтения ✅
- Методы can_user_edit ✅

### 3.4 Приложение pages ✅ ВЫПОЛНЕНО
- Page модель с page_components ✅
- Компиляция компонентов в HTML/CSS ✅
- Управление главной страницей ✅
- SEO поля ✅

### 3.5 Приложение dynamic_models ✅ ВЫПОЛНЕНО
- DynamicModel с валидацией полей ✅
- DynamicModelData с JSON данными ✅
- Типы полей и валидация ✅
- Методы для работы с данными ✅

## 4. Система разрешений ✅ СОЗДАНА

```python
# apps/common/permissions.py ✅ ВЫПОЛНЕНО
- RoleBasedPermission базовый класс ✅
- SitePermission для сайтов ✅
- PostPermission для постов ✅
- PagePermission для страниц ✅
- DynamicModelPermission для динамических моделей ✅
- UserPermission для пользователей ✅
- Вспомогательные классы и функции ✅
```

## 5. Миграции ✅ СОЗДАНЫ

- Миграции для accounts ✅
- Миграции для sites ✅  
- Миграции для posts ✅
- Миграции для pages ✅
- Миграции для dynamic_models ✅
- Management команда create_initial_data ✅

## 6. Команды управления ✅ СОЗДАНЫ

- create_initial_data команда для создания ролей и суперпользователя ✅

## 8. Задачи для разработки

### Этап 1: Настройка проекта (1 неделя) ✅ ВЫПОЛНЕНО
- [x] Создание Django проекта с правильной структурой
- [x] Настройка MySQL базы данных
- [x] Конфигурация settings для разных окружений
- [ ] Настройка Docker и docker-compose
- [x] Установка и настройка всех зависимостей
- [x] Настройка статических файлов и медиа
- [x] Настройка логирования

### Этап 2: Базовые модели и миграции (1 неделя) ✅ ВЫПОЛНЕНО
- [x] Создание кастомной модели пользователя
- [x] Модель ролей и разрешений
- [x] Модели сайтов, постов, страниц
- [x] Модель динамических моделей
- [x] Создание и применение миграций
- [x] Начальные данные (fixtures)

### Этап 3: Авторизация и JWT (3-4 дня) ⏳ СЛЕДУЮЩИЙ
- [ ] Настройка django-rest-framework
- [ ] Интеграция JWT авторизации
- [ ] Эндпоинты регистрации и входа
- [ ] Обновление токенов
- [ ] Middleware для проверки токенов
- [ ] Logout функционал

### Этап 4: Система разрешений (3-4 дня) ✅ ВЫПОЛНЕНО
- [x] Базовые классы разрешений
- [x] Разрешения для каждой модели
- [x] Фильтрация queryset по ролям
- [ ] Тестирование разрешений
- [ ] Декораторы для проверки прав

### Этап 5: API Endpoints (1-1.5 недели) ⏳ ПЛАНИРУЕТСЯ
- [ ] ViewSets для всех моделей
- [ ] Сериализаторы с валидацией
- [ ] Фильтрация и поиск
- [ ] Пагинация
- [ ] Загрузка файлов
- [ ] Кастомные action'ы
- [ ] Обработка ошибок

## 9. Конфигурационные файлы

### 9.1 Settings
```python
# core/settings/base.py
import os
from pathlib import Path
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent.parent

SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)

# База данных
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
        },
    }
}

# JWT настройки
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
}

# DRF настройки
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': 
