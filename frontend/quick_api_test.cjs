/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend API
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node quick_api_test.js
 */

const axios = require('axios');

const BASE_URL = 'http://127.0.0.1:8000';

async function checkBackend() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend —Å–µ—Ä–≤–µ—Ä–∞...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint (swagger –¥–æ—Å—Ç—É–ø–µ–Ω)
    const healthResponse = await axios.get(`${BASE_URL}/api/v1/swagger/`, { timeout: 5000 });
    console.log('‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authResponse = await axios.post(`${BASE_URL}/api/v1/auth/token/`, {
      email: 'pipka@eisec.ru',
      password: 'Pipi1234'
    });
    
    if (authResponse.data.access) {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('‚úÖ API –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∞–π—Ç–æ–≤
      const token = authResponse.data.access;
      const sitesResponse = await axios.get(`${BASE_URL}/api/v1/sites/requests/available_sites/`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      console.log(`‚úÖ Endpoint –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (${sitesResponse.data.length} —Å–∞–π—Ç–æ–≤)`);
      
      console.log('\nüöÄ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.');
      console.log('–ö–æ–º–∞–Ω–¥–∞: node test_site_requests_api.js');
      
    } else {
      console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ç–æ–∫–µ–Ω');
    }
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd ../backend && python3 manage.py runserver 8000');
    } else if (error.response?.status === 401) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      if (error.response) {
        console.log(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
      }
    }
  }
}

checkBackend(); 