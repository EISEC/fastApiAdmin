/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
 */

const axios = require('axios');

const BASE_URL = 'http://127.0.0.1:8000/api/v1';
const TEST_USER = {
  email: 'pipka@eisec.ru',
  password: 'Pipi1234'
};

async function advancedDiagnosis() {
  console.log('üîç –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ü–†–ê–í–ê–ú–ò');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  try {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('\n1. üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const authResponse = await axios.post(`${BASE_URL}/auth/token/`, TEST_USER);
    const token = authResponse.data.access;
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
    console.log(`üì± Access Token: ${token.substring(0, 50)}...`);
    
    const api = axios.create({
      baseURL: BASE_URL,
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    // 2. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log('\n2. üë§ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
    try {
      const userResponse = await api.get('/auth/me/');
      const user = userResponse.data;
      
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:');
      console.log(`   üìß Email: ${user.email}`);
      console.log(`   üÜî ID: ${user.id}`);
      console.log(`   üë§ Username: ${user.username}`);
      console.log(`   üîí –†–æ–ª—å: ${JSON.stringify(user.role)}`);
      console.log(`   ‚úÖ is_active: ${user.is_active}`);
      console.log(`   üõ°Ô∏è is_superuser: ${user.is_superuser}`);
      console.log(`   üìä is_staff: ${user.is_staff}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è
      if (user.role && user.role.name === 'user') {
        console.log('‚úÖ –†–æ–ª—å "user" –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–æ–ª—å—é! –û–∂–∏–¥–∞–ª–æ—Å—å "user", –ø–æ–ª—É—á–µ–Ω–æ: ${user.role?.name || '–ù–ï–¢ –†–û–õ–ò'}`);
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.response?.status);
      return;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
    console.log('\n3. üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤:');
    try {
      const sitesResponse = await api.get('/sites/requests/available_sites/');
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤: ${sitesResponse.data.length}`);
      
      sitesResponse.data.forEach((site, index) => {
        console.log(`   ${index + 1}. üè† ${site.name} (ID: ${site.id}, –¥–æ–º–µ–Ω: ${site.domain})`);
      });
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤: ${error.response?.status}`);
      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response?.data?.detail || error.message}`);
    }
    
    // 4. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    console.log('\n4. üìù –î–µ—Ç–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:');
    try {
      const sitesResponse = await api.get('/sites/requests/available_sites/');
      
      if (sitesResponse.data.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
        return;
      }
      
      const testSite = sitesResponse.data[0];
      console.log(`üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–π—Ç: ${testSite.name} (ID: ${testSite.id})`);
      
      const requestData = {
        site: testSite.id,
        requested_role: 'author',
        message: '–î–µ—Ç–∞–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞'
      };
      
      console.log(`üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: ${JSON.stringify(requestData, null, 2)}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      try {
        const createResponse = await api.post('/sites/requests/', requestData);
        console.log('‚úÖ –£–°–ü–ï–•! –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log(`   üÜî ID: ${createResponse.data.id}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${createResponse.data.status}`);
        console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${createResponse.data.created_at}`);
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        try {
          await api.delete(`/sites/requests/${createResponse.data.id}/cancel_request/`);
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω');
        } catch (e) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
        }
        
      } catch (createError) {
        console.log('‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:');
        console.log(`   üìä HTTP —Å—Ç–∞—Ç—É—Å: ${createError.response?.status}`);
        console.log(`   üîó URL: ${createError.config?.url}`);
        console.log(`   üì® –ú–µ—Ç–æ–¥: ${createError.config?.method?.toUpperCase()}`);
        console.log(`   üîë –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${JSON.stringify(createError.config?.headers || {})}`);
        console.log(`   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${createError.response?.data?.detail || createError.message}`);
        
        if (createError.response?.data) {
          console.log(`   üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç backend: ${JSON.stringify(createError.response.data, null, 2)}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (createError.response?.status === 403) {
          console.log('\nüîç –ê–Ω–∞–ª–∏–∑ 403 –æ—à–∏–±–∫–∏:');
          console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è == "user"');
          console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–æ–ª—å');
          console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ backend –∫–æ–¥ –≤ SiteRequestViewSet.create()');
        }
      }
      
    } catch (globalError) {
      console.log(`‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${globalError.message}`);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö endpoint-–æ–≤
    console.log('\n5. üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö endpoints:');
    
    // –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã
    try {
      const myRequestsResponse = await api.get('/sites/requests/my_requests/');
      console.log(`‚úÖ –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã: ${myRequestsResponse.data.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ "–º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã": ${error.response?.status}`);
    }
    
    // Pending reviews (–æ–∂–∏–¥–∞–µ—Ç—Å—è 403)
    try {
      const pendingResponse = await api.get('/sites/requests/pending_reviews/');
      console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ pending reviews: ${pendingResponse.data.length}`);
    } catch (error) {
      if (error.response?.status === 403) {
        console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è 403 –æ—à–∏–±–∫–∞ –¥–ª—è pending reviews');
      } else {
        console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ pending reviews: ${error.response?.status}`);
      }
    }
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üéØ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

advancedDiagnosis(); 