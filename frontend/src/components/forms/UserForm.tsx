import React, { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useUsersStore } from '../../store';
import type { User, Role } from '../../types';
import Button from '../ui/Button';
import Card from '../ui/Card';

// Zod —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = z.object({
  username: z.string()
    .min(1, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    .min(3, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞')
    .max(150, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤'),
  email: z.string()
    .min(1, 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    .email('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'),
  password: z.string()
    .min(8, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
    .or(z.literal(''))
    .optional(),
  first_name: z.string()
    .max(150, '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤')
    .or(z.literal(''))
    .optional(),
  last_name: z.string()
    .max(150, '–§–∞–º–∏–ª–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤')
    .or(z.literal(''))
    .optional(),
  role: z.number({
    required_error: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    invalid_type_error: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
  }).min(1, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
  is_active: z.boolean(),
  birth_date: z.string()
    .or(z.literal(''))
    .optional(),
  about: z.string()
    .max(1000, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤')
    .or(z.literal(''))
    .optional(),
  avatar: z.union([
    z.instanceof(File),
    z.string(),
    z.null()
  ]).optional(),
});

type UserFormData = z.infer<typeof userSchema>;

interface UserFormProps {
  user?: User | null;
  onSuccess?: () => void;
  onCancel?: () => void;
}

/**
 * –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
const UserForm: React.FC<UserFormProps> = ({ 
  user, 
  onSuccess, 
  onCancel 
}) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–º–µ—Å—Ç–æ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
  const isLoading = useUsersStore(state => state.isLoading);
  const roles = useUsersStore(state => state.roles || []);
  const storeError = useUsersStore(state => state.error);
  const rolesLoading = useUsersStore(state => state.rolesLoading);
  
  const isEditing = Boolean(user);

  const {
    register,
    handleSubmit,
    reset,
    setValue,
    watch,
    formState: { errors, isDirty, isValid }
  } = useForm<UserFormData>({
    resolver: zodResolver(userSchema),
    defaultValues: {
      username: '',
      email: '',
      password: '',
      first_name: '',
      last_name: '',
      is_active: true,
      birth_date: '',
      about: '',
      // role –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π
    },
    mode: 'onChange',
  });

  const watchedRole = watch('role');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const setDefaultRole = () => {
    if (!rolesLoading && Array.isArray(roles) && roles.length > 0 && !isEditing && !watchedRole) {
      const defaultRole = roles.find(r => r.name === 'user') || roles[0];
      setValue('role', defaultRole.id, { shouldValidate: true });
      console.log('üéØ Set default role:', defaultRole.name_display, `(id: ${defaultRole.id})`);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const setUserRole = () => {
    if (user && isEditing && !rolesLoading && Array.isArray(roles) && roles.length > 0) {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
      const userRole = roles.find(r => r.id === user.role?.id);
      if (userRole) {
        setValue('role', userRole.id, { shouldValidate: true });
        console.log('üéØ Set user role for editing:', userRole.name_display, `(id: ${userRole.id})`);
      } else {
        console.warn('‚ö†Ô∏è User role not found in roles list:', user.role);
      }
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (user && isEditing) {
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      reset({
        username: user.username || '',
        email: user.email || '',
        password: '', // –ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        first_name: user.first_name || '',
        last_name: user.last_name || '',
        role: user.role?.id || 0, // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –±—É–¥–µ—Ç –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π
        is_active: user.is_active !== undefined ? user.is_active : true,
        birth_date: user.birth_date || '',
        about: user.about || '',
      });
      
      console.log('üìù Form reset with user data:', {
        username: user.username,
        email: user.email,
        role: user.role?.id,
        is_active: user.is_active,
        first_name: user.first_name,
        last_name: user.last_name,
        birth_date: user.birth_date,
        about: user.about
      });
    }
  }, [user, isEditing, reset]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const loadRoles = async () => {
      try {
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store
        await useUsersStore.getState().fetchRoles();
        console.log('üéâ Roles loaded successfully in component');
      } catch (error) {
        console.error('‚ùå Failed to load roles in component:', error);
      }
    };
    
    loadRoles();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π
  useEffect(() => {
    if (!rolesLoading && Array.isArray(roles) && roles.length > 0) {
      if (isEditing && user) {
        // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUserRole();
      } else if (!isEditing && !watchedRole) {
        // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setDefaultRole();
      }
    }
  }, [rolesLoading, roles.length, isEditing, user?.role?.id, watchedRole]); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store
      useUsersStore.getState().clearError();
    };
  }, []); // –£–±–∏—Ä–∞–µ–º clearError –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const onSubmit = async (data: UserFormData) => {
    try {
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store
      useUsersStore.getState().clearError();
      
      if (isEditing && user) {
        const updateData: any = {
          username: data.username,
          email: data.email,
          first_name: data.first_name,
          last_name: data.last_name,
          role: data.role,
          is_active: data.is_active,
          birth_date: data.birth_date,
          about: data.about,
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥–µ–Ω
        if (data.password && data.password.trim()) {
          updateData.password = data.password;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
        if (data.avatar instanceof File) {
          updateData.avatar = data.avatar;
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store
        await useUsersStore.getState().updateUser(user.id, updateData);
      } else {
        const createData: any = {
          username: data.username,
          email: data.email,
          password: data.password || '',
          first_name: data.first_name,
          last_name: data.last_name,
          role: data.role!,
          is_active: data.is_active,
          birth_date: data.birth_date,
          about: data.about,
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
        if (data.avatar instanceof File) {
          createData.avatar = data.avatar;
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store
        await useUsersStore.getState().createUser(createData);
      }
      
      onSuccess?.();
    } catch {
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ store
    }
  };

  const handleCancel = () => {
    reset();
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store
    useUsersStore.getState().clearError();
    onCancel?.();
  };

  const getRoleName = (roleId: number) => {
    if (!Array.isArray(roles) || roles.length === 0) {
      return '–ó–∞–≥—Ä—É–∑–∫–∞...';
    }
    
    const role = roles.find(r => r.id === roleId);
    if (!role) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–æ–ª–∏
    const roleIcons: Record<string, string> = {
      superuser: 'üëë',
      admin: 'üõ°Ô∏è',
      author: '‚úçÔ∏è',
      user: 'üë§',
    };
    
    const icon = roleIcons[role.name] || 'üë§';
    return `${icon} ${role.name_display}`;
  };

  return (
    <Card>
      <div className="p-6">
        <div className="mb-6">
          <h2 className="text-xl font-semibold text-gray-900">
            {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
          </h2>
          <p className="mt-1 text-sm text-gray-600">
            {isEditing 
              ? '–û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
              : '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏'
            }
          </p>
        </div>

        {/* –û—à–∏–±–∫–∏ API */}
        {storeError && (
          <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <span className="text-red-400 text-xl">‚ö†Ô∏è</span>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">–û—à–∏–±–∫–∞</h3>
                <div className="mt-1 text-sm text-red-700">
                  {storeError}
                </div>
              </div>
            </div>
          </div>
        )}

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *
              </label>
              <div className="mt-1">
                <input
                  id="username"
                  type="text"
                  {...register('username')}
                  className={`block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm ${
                    errors.username 
                      ? 'border-red-300 text-red-900 placeholder-red-300' 
                      : 'border-gray-300'
                  }`}
                  placeholder="username"
                  disabled={isLoading}
                />
                {errors.username && (
                  <p className="mt-2 text-sm text-red-600">{errors.username.message}</p>
                )}
              </div>
            </div>

            {/* Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email *
              </label>
              <div className="mt-1">
                <input
                  id="email"
                  type="email"
                  {...register('email')}
                  className={`block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm ${
                    errors.email 
                      ? 'border-red-300 text-red-900 placeholder-red-300' 
                      : 'border-gray-300'
                  }`}
                  placeholder="user@example.com"
                  disabled={isLoading}
                />
                {errors.email && (
                  <p className="mt-2 text-sm text-red-600">{errors.email.message}</p>
                )}
              </div>
            </div>

            {/* –ò–º—è */}
            <div>
              <label htmlFor="first_name" className="block text-sm font-medium text-gray-700">
                –ò–º—è
              </label>
              <div className="mt-1">
                <input
                  id="first_name"
                  type="text"
                  {...register('first_name')}
                  className={`block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm ${
                    errors.first_name 
                      ? 'border-red-300 text-red-900 placeholder-red-300' 
                      : 'border-gray-300'
                  }`}
                  placeholder="–ò–≤–∞–Ω"
                  disabled={isLoading}
                />
                {errors.first_name && (
                  <p className="mt-2 text-sm text-red-600">{errors.first_name.message}</p>
                )}
              </div>
            </div>

            {/* –§–∞–º–∏–ª–∏—è */}
            <div>
              <label htmlFor="last_name" className="block text-sm font-medium text-gray-700">
                –§–∞–º–∏–ª–∏—è
              </label>
              <div className="mt-1">
                <input
                  id="last_name"
                  type="text"
                  {...register('last_name')}
                  className={`block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm ${
                    errors.last_name 
                      ? 'border-red-300 text-red-900 placeholder-red-300' 
                      : 'border-gray-300'
                  }`}
                  placeholder="–ò–≤–∞–Ω–æ–≤"
                  disabled={isLoading}
                />
                {errors.last_name && (
                  <p className="mt-2 text-sm text-red-600">{errors.last_name.message}</p>
                )}
              </div>
            </div>
          </div>

          {/* –ü–∞—Ä–æ–ª—å */}
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              {isEditing ? '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ—Ç–µ)' : '–ü–∞—Ä–æ–ª—å *'}
            </label>
            <div className="mt-1">
              <input
                id="password"
                type="password"
                {...register('password')}
                className={`block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm ${
                  errors.password 
                    ? 'border-red-300 text-red-900 placeholder-red-300' 
                    : 'border-gray-300'
                }`}
                placeholder={isEditing ? '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å' : '–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'}
                disabled={isLoading}
              />
              {errors.password && (
                <p className="mt-2 text-sm text-red-600">{errors.password.message}</p>
              )}
            </div>
          </div>

          {/* –†–æ–ª—å –∏ —Å—Ç–∞—Ç—É—Å */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* –†–æ–ª—å */}
            <div>
              <label htmlFor="role" className="block text-sm font-medium text-gray-700">
                –†–æ–ª—å *
              </label>
              <div className="mt-1">
                <select
                  id="role"
                  {...register('role', { valueAsNumber: true })}
                  className={`block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm ${
                    errors.role 
                      ? 'border-red-300 text-red-900' 
                      : 'border-gray-300'
                  }`}
                  disabled={isLoading || rolesLoading}
                >
                  <option value="">
                    {rolesLoading || roles.length === 0 ? '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π...' : '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å'}
                  </option>
                  {!rolesLoading && Array.isArray(roles) && roles.map((role) => (
                    <option key={role.id} value={role.id}>
                      {getRoleName(role.id)}
                    </option>
                  ))}
                </select>
                {errors.role && (
                  <p className="mt-2 text-sm text-red-600">{errors.role.message}</p>
                )}
              </div>
            </div>

            {/* –°—Ç–∞—Ç—É—Å */}
            <div>
              <label htmlFor="is_active" className="block text-sm font-medium text-gray-700">
                –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
              </label>
              <div className="mt-1">
                <select
                  id="is_active"
                  {...register('is_active', {
                    setValueAs: (value) => value === 'true'
                  })}
                  className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  disabled={isLoading}
                >
                  <option value="true">‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π</option>
                  <option value="false">‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</option>
                </select>
              </div>
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-4 pt-4 border-t border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            
            {/* –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è */}
            <div>
              <label htmlFor="birth_date" className="block text-sm font-medium text-gray-700">
                –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
              </label>
              <div className="mt-1">
                <input
                  id="birth_date"
                  type="date"
                  {...register('birth_date')}
                  className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  disabled={isLoading}
                />
              </div>
            </div>

            {/* –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
            <div>
              <label htmlFor="about" className="block text-sm font-medium text-gray-700">
                –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
              </label>
              <div className="mt-1">
                <textarea
                  id="about"
                  rows={3}
                  {...register('about')}
                  className={`block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm ${
                    errors.about 
                      ? 'border-red-300 text-red-900 placeholder-red-300' 
                      : 'border-gray-300'
                  }`}
                  placeholder="–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
                  disabled={isLoading}
                />
                {errors.about && (
                  <p className="mt-2 text-sm text-red-600">{errors.about.message}</p>
                )}
              </div>
            </div>

            {/* –ê–≤–∞—Ç–∞—Ä */}
            <div>
              <label htmlFor="avatar" className="block text-sm font-medium text-gray-700">
                –ê–≤–∞—Ç–∞—Ä
              </label>
              <div className="mt-1">
                <input
                  id="avatar"
                  type="file"
                  accept="image/*"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    if (file) {
                      setValue('avatar', file, { shouldDirty: true });
                    }
                  }}
                  className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary-50 file:text-primary-700 hover:file:bg-primary-100"
                  disabled={isLoading}
                />
                <p className="mt-1 text-xs text-gray-500">
                  PNG, JPG, GIF –¥–æ 5MB
                </p>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex items-center justify-end space-x-3 pt-6 border-t border-gray-200">
            <Button
              type="button"
              variant="secondary"
              onClick={handleCancel}
              disabled={isLoading}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              type="submit"
              variant="primary"
              disabled={isLoading || !isValid || (!isDirty && isEditing)}
              loading={isLoading}
            >
              {isLoading 
                ? (isEditing ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ–∑–¥–∞–Ω–∏–µ...') 
                : (isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
              }
            </Button>
          </div>
        </form>
      </div>
    </Card>
  );
};

export default UserForm; 