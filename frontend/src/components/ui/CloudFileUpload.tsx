import React, { useRef, useState, useCallback } from 'react';
import { clsx } from 'clsx';
import Icon from './Icon';
import { useToastStore } from '../../store/toastStore';
import { api } from '../../lib/axios.config';
// –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

interface CloudFileUploadProps {
  value?: string; // URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  onChange?: (url: string | null) => void;
  accept?: string;
  disabled?: boolean;
  error?: boolean;
  label?: string;
  helperText?: string;
  preview?: boolean;
  className?: string;
  siteId?: number; // ID —Å–∞–π—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ storage
  maxSize?: number; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10MB)
  multiple?: boolean; // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
}

interface UploadResponse {
  url: string;
  path: string;
  name: string;
  size: number;
  type?: string;
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç drag&drop, –ø—Ä–µ–≤—å—é —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤, –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–∞–∑–º–µ—Ä–∞
 */
const CloudFileUpload: React.FC<CloudFileUploadProps> = ({
  value,
  onChange,
  accept,
  disabled = false,
  error = false,
  label,
  helperText,
  preview = true,
  className,
  siteId,
  maxSize = 10 * 1024 * 1024, // 10MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  multiple = false
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [uploading, setUploading] = useState(false);
  const [deleting, setDeleting] = useState(false);
  const [dragOver, setDragOver] = useState(false);
  const [imageLoading, setImageLoading] = useState(true); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [imageError, setImageError] = useState(false); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const { success: showSuccessToast, error: showErrorToast } = useToastStore();

  const uploadToCloud = async (file: File): Promise<UploadResponse> => {
    const formData = new FormData();
    formData.append('file', file);
    
    if (siteId) {
      formData.append('site_id', siteId.toString());
    }

    return api.upload<UploadResponse>('/files/upload-to-cloud/', formData);
  };

  const validateFile = (file: File): string | null => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (file.size > maxSize) {
      const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(1);
      return `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${maxSizeMB}MB`;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (accept) {
      const acceptedTypes = accept.split(',').map(type => type.trim());
      const fileExtension = '.' + (file.name.split('.').pop() || '').toLowerCase();
      const mimeType = file.type;
      
      const isAccepted = acceptedTypes.some(acceptedType => {
        if (acceptedType.startsWith('.')) {
          return fileExtension === acceptedType;
        }
        if (acceptedType.includes('*')) {
          const baseType = acceptedType.split('/')[0];
          return mimeType.startsWith(baseType);
        }
        return mimeType === acceptedType;
      });

      if (!isAccepted) {
        return `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${accept}`;
      }
    }

    return null;
  };

  const handleFileUpload = async (file: File) => {
    const validationError = validateFile(file);
    if (validationError) {
      showErrorToast('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', validationError);
      return;
    }

    setUploading(true);
    
    try {
      console.log('üöÄ Uploading file to cloud:', file.name, `(${(file.size / 1024).toFixed(1)}KB)`);
      const uploadResult = await uploadToCloud(file);
      
      console.log('‚úÖ File uploaded successfully:', uploadResult.url);
      onChange?.(uploadResult.url);
      
      showSuccessToast(
        '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω',
        `–§–∞–π–ª "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ`
      );
      
    } catch (error) {
      console.error('‚ùå Upload failed:', error);
      
      showErrorToast(
        '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
        error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'
      );
      
      // –û—á–∏—â–∞–µ–º input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    } finally {
      setUploading(false);
    }
  };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    
    if (!files || files.length === 0) {
      onChange?.(null);
      return;
    }

    const file = files[0]; // –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª
    await handleFileUpload(file);
  };

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (!disabled && !uploading) {
      setDragOver(true);
    }
  }, [disabled, uploading]);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragOver(false);
  }, []);

  const handleDrop = useCallback(async (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragOver(false);

    if (disabled || uploading) return;

    const files = Array.from(e.dataTransfer.files);
    if (files.length === 0) return;

    const file = files[0]; // –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª
    await handleFileUpload(file);
  }, [disabled, uploading]);

  const handleClick = () => {
    if (!disabled && !uploading) {
      fileInputRef.current?.click();
    }
  };

  const handleRemove = async () => {
    if (!value) return;
    
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è
      setDeleting(true);
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const result = await api.delete<{detail: string; deleted_path?: string}>(`/media/delete/?url=${encodeURIComponent(value)}`);
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ–±–ª–∞–∫–∞:', result);
      
      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—ã
      onChange?.(null);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setImageLoading(true);
      setImageError(false);
      
      showSuccessToast(
        '–§–∞–π–ª —É–¥–∞–ª–µ–Ω',
        '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
      );
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ –æ–±–ª–∞–∫–∞:', error);
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–ª–∞–∫–µ (404), –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
      if (error.response?.status === 404) {
        console.log('‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–ª–∞–∫–µ, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—ã');
        onChange?.(null);
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
        setImageLoading(true);
        setImageError(false);
        
        showSuccessToast(
          '–ü–æ–ª–µ –æ—á–∏—â–µ–Ω–æ',
          '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–ª–∞–∫–µ, –ø–æ–ª–µ —Ñ–æ—Ä–º—ã –æ—á–∏—â–µ–Ω–æ'
        );
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showErrorToast(
          '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è',
          error.response?.data?.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞–∫–∞'
        );
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      }
    } finally {
      setDeleting(false);
    }
  };

  const getFileInfo = () => {
    if (!value) return null;

    const fileName = value.split('/').pop() || value;
    const fileExtension = (fileName.split('.').pop() || '').toLowerCase();
    
    return {
      name: fileName,
      extension: fileExtension,
      isImage: ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'].includes(fileExtension),
      isVideo: ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'].includes(fileExtension),
      isAudio: ['mp3', 'wav', 'ogg', 'flac', 'aac'].includes(fileExtension),
      isPdf: fileExtension === 'pdf',
      isDocument: ['doc', 'docx', 'txt', 'rtf'].includes(fileExtension),
      isSpreadsheet: ['xls', 'xlsx', 'csv'].includes(fileExtension),
      isArchive: ['zip', 'rar', '7z', 'tar', 'gz'].includes(fileExtension)
    };
  };

  const getFileIcon = (fileInfo: ReturnType<typeof getFileInfo>) => {
    if (!fileInfo) return 'file';
    
    if (fileInfo.isImage) return 'image';
    if (fileInfo.isVideo) return 'video';
    if (fileInfo.isAudio) return 'fileAudio';
    if (fileInfo.isPdf) return 'pdf';
    if (fileInfo.isDocument) return 'file';
    if (fileInfo.isSpreadsheet) return 'file';
    if (fileInfo.isArchive) return 'fileZip';
    
    return 'file';
  };

  const formatFileSize = (url: string): string => {
    // –ü–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑ URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return '–ó–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ';
  };

  const fileInfo = getFileInfo();
  const hasFile = Boolean(value);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL
  React.useEffect(() => {
    if (value) {
      setImageLoading(true);
      setImageError(false);
    }
  }, [value]);

  return (
    <div className={clsx('w-full', className)}>
      {label && (
        <label className="block text-sm font-medium text-gray-700 mb-2">
          {label}
        </label>
      )}
      
      <div className="space-y-4">
        {/* –û–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ */}
        <div
          onClick={handleClick}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
          className={clsx(
            'border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-all duration-200 bg-white',
            dragOver && 'border-blue-400 bg-blue-50 scale-[1.02]',
            error && !dragOver
              ? 'border-red-300 hover:border-red-400' 
              : 'border-gray-300 hover:border-gray-400',
            !dragOver && !error && 'hover:bg-gray-50',
            (disabled || uploading) && 'opacity-50 cursor-not-allowed hover:border-gray-300 hover:bg-white'
          )}
        >
          <input
            ref={fileInputRef}
            type="file"
            onChange={handleFileChange}
            accept={accept}
            disabled={disabled || uploading}
            multiple={multiple}
            className="hidden"
          />
          
          <div className="space-y-3">
            {uploading ? (
              <>
                <div className="animate-spin mx-auto w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full"></div>
                <div className="text-sm text-gray-600">
                  <span className="font-medium text-blue-600">
                    –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –æ–±–ª–∞–∫–æ...
                  </span>
                </div>
              </>
            ) : (
              <>
                <Icon 
                  name={dragOver ? "download" : "upload"} 
                  size="2xl" 
                  color={dragOver ? "primary" : "gray"} 
                  className="mx-auto" 
                />
                
                <div className="text-sm text-gray-600">
                  <span className="font-medium text-blue-600 hover:text-blue-500">
                    {dragOver ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏' : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞'}
                  </span>
                  {!dragOver && ' –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞'}
                </div>
                
                <div className="text-xs text-gray-500">
                  –§–∞–π–ª –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Yandex Object Storage
                </div>
              </>
            )}
            
            {accept && !uploading && (
              <p className="text-xs text-gray-500">
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {accept.replace(/\./g, '').toUpperCase()}
              </p>
            )}
            
            {maxSize && !uploading && (
              <p className="text-xs text-gray-500">
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {(maxSize / (1024 * 1024)).toFixed(1)}MB
              </p>
            )}
          </div>
        </div>
        
        {/* –ü—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ */}
        {hasFile && fileInfo && (
          <div className="bg-gray-50 rounded-lg p-3 border border-gray-200">
            <div className="flex items-center justify-between gap-3">
              <div className="flex items-center gap-3 flex-1 min-w-0">
                
                {/* –ü—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞ */}
                <div className="flex-shrink-0">
                  {preview && fileInfo.isImage ? (
                    <div className="relative w-12 h-12">
                      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
                      {imageLoading && !imageError && (
                        <div className="absolute inset-0 w-full h-full bg-gradient-to-br from-blue-50 to-indigo-100 rounded-lg border border-gray-200 flex items-center justify-center">
                          <div className="animate-spin w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full"></div>
                        </div>
                      )}
                      
                      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                      <img 
                        src={value} 
                        alt="Preview" 
                        className={clsx(
                          "w-full h-full object-cover rounded-lg border border-gray-200 transition-opacity duration-200",
                          imageLoading || imageError ? "opacity-0" : "opacity-100"
                        )}
                        onLoad={() => {
                          setImageLoading(false);
                          setImageError(false);
                        }}
                        onError={() => {
                          setImageLoading(false);
                          setImageError(true);
                        }}
                      />
                      
                      {/* Fallback –∏–∫–æ–Ω–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ - –ø—Ä–æ—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ */}
                      {imageError && (
                        <div className="absolute inset-0 w-full h-full bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg border border-gray-200 flex items-center justify-center">
                          <Icon name="image" size="md" color="gray" />
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="w-12 h-12 bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg border border-gray-200 flex items-center justify-center shadow-sm">
                      <Icon name={getFileIcon(fileInfo)} size="md" color="primary" />
                    </div>
                  )}
                </div>
                
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ */}
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-900 truncate" title={fileInfo.name}>
                    {fileInfo.name}
                  </p>
                  <p className="text-xs text-gray-500 mt-1">
                    <Icon name="check" size="xs" className="inline mr-1 text-green-500" />
                    –ó–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ
                  </p>
                </div>
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
              <button
                onClick={handleRemove}
                disabled={disabled || uploading || deleting}
                className="p-1 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded disabled:opacity-50 disabled:cursor-not-allowed flex-shrink-0 transition-colors"
                title={deleting ? "–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ–±–ª–∞–∫–∞..." : "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞–∫–∞"}
              >
                {deleting ? (
                  <div className="animate-spin w-4 h-4 border-2 border-red-600 border-t-transparent rounded-full"></div>
                ) : (
                  <Icon name="close" size="sm" />
                )}
              </button>
            </div>
          </div>
        )}
      </div>
      
      {helperText && (
        <p className={clsx(
          'mt-2 text-sm',
          error ? 'text-red-600' : 'text-gray-500'
        )}>
          {helperText}
        </p>
      )}
    </div>
  );
};

export default CloudFileUpload; 