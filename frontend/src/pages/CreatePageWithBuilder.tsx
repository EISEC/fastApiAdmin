import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import DashboardLayout from '../components/layout/DashboardLayout';
import PageBuilder from '../components/pageBuilder/PageBuilder';
import Button from '../components/ui/Button';
import Input from '../components/ui/Input';
import { usePageBuilderStore } from '../store/pageBuilderStore';
import { usePagesStore } from '../store/pagesStore';

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–ª–æ–∫–æ–≤
 */
const CreatePageWithBuilder: React.FC = () => {
  const navigate = useNavigate();
  const { blocks, exportBlocks } = usePageBuilderStore();
  const { createPage } = usePagesStore();
  
  const [pageData, setPageData] = useState({
    title: '',
    slug: '',
    meta_description: '',
    site: 1 // –ó–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  });

  const [isSaving, setIsSaving] = useState(false);

  const handleSave = async () => {
    if (!pageData.title.trim()) {
      return;
    }

    if (blocks.length === 0) {
      return;
    }

    setIsSaving(true);
    
    try {
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –≤ JSON
      const content = exportBlocks();
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await createPage({
        ...pageData,
        content,
        status: 'draft',
        visibility: 'public'
      });
      
      navigate('/pages');
      
    } catch (error) {
      console.error('Error creating page:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleSaveAsDraft = async () => {
    await handleSave();
  };

  const handlePublish = async () => {
    try {
      const content = exportBlocks();
      
      await createPage({
        ...pageData,
        content,
        status: 'published',
        visibility: 'public'
      });
      
      navigate('/pages');
      
    } catch (error) {
      console.error('Error publishing page:', error);
    }
  };

  const generateSlug = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9–∞-—è]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
  };

  const handleTitleChange = (title: string) => {
    setPageData({
      ...pageData,
      title,
      slug: pageData.slug || generateSlug(title)
    });
  };

  return (
    <DashboardLayout>
      <div className="h-screen flex flex-col">
        {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
        <div className="bg-white border-b border-gray-200 px-6 py-4 flex-shrink-0">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button
                variant="secondary"
                size="sm"
                onClick={() => navigate('/pages')}
                className="mr-4"
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
              </Button>
              
              <div className="flex items-center gap-4">
                <div className="w-64">
                  <Input
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                    value={pageData.title}
                    onChange={(e) => handleTitleChange(e.target.value)}
                    className="text-lg font-semibold"
                  />
                </div>
                
                <div className="w-48">
                  <Input
                    placeholder="URL (slug)"
                    value={pageData.slug}
                    onChange={(e) => setPageData({ ...pageData, slug: e.target.value })}
                    className="text-sm"
                  />
                </div>
              </div>
            </div>

            <div className="flex items-center gap-2">
              <div className="text-sm text-gray-500 mr-4">
                –ë–ª–æ–∫–æ–≤: {blocks.length}
              </div>
              
              <Button
                variant="secondary"
                size="sm"
                onClick={handleSaveAsDraft}
                loading={isSaving}
                disabled={!pageData.title.trim() || blocks.length === 0}
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
              </Button>
              
              <Button
                variant="primary"
                size="sm"
                onClick={handlePublish}
                loading={isSaving}
                disabled={!pageData.title.trim() || blocks.length === 0}
              >
                üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
              </Button>
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è */}
          <div className="mt-4 flex gap-4">
            <div className="flex-1">
              <Input
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è SEO"
                value={pageData.meta_description}
                onChange={(e) => setPageData({ ...pageData, meta_description: e.target.value })}
                className="text-sm"
              />
            </div>
          </div>
        </div>

        {/* –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü */}
        <div className="flex-1 overflow-hidden">
          <PageBuilder />
        </div>
      </div>
    </DashboardLayout>
  );
};

export default CreatePageWithBuilder; 