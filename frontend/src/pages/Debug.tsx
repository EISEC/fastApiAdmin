import React, { useState } from 'react';
import { useAuthStore } from '../store/authStore';
import { useGlobalSettings } from '../store/globalSettingsStore';
import { useSitesStore } from '../store/sitesStore';
import { usePostsStore } from '../store/postsStore';
import DashboardLayout from '../components/layout/DashboardLayout';
import Icon from '../components/ui/Icon';
import apiClient from '../services/api';
import Button from '../components/ui/Button';
import Card from '../components/ui/Card';
import { api } from '../lib/axios.config';
import Input from '../components/ui/Input';

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö store
 */
const Debug: React.FC = () => {
  const authStore = useAuthStore();
  const globalSettings = useGlobalSettings();
  const sitesStore = useSitesStore();
  const postsStore = usePostsStore();
  const [corsStatus, setCorsStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');
  const [apiStatus, setApiStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');
  const [authStatus, setAuthStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');
  const [corsResult, setCorsResult] = useState<string>('');
  const [apiResult, setApiResult] = useState<string>('');
  const [authResult, setAuthResult] = useState<string>('');
  const [testEmail, setTestEmail] = useState('test@example.com');
  const [testPassword, setTestPassword] = useState('testpass123');

  const testCors = async () => {
    setCorsStatus('loading');
    setCorsResult('');
    
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç CORS...');
      
      // –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
      const response = await fetch('http://localhost:8000/test/', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Origin': 'http://localhost:5173',
        },
        credentials: 'include', // –í–∫–ª—é—á–∞–µ–º cookies
      });
      
      console.log('üì° CORS –æ—Ç–≤–µ—Ç:', response);
      console.log('üì° CORS headers:', [...response.headers.entries()]);
      
      if (response.ok) {
        const text = await response.text();
        setCorsResult(`‚úÖ CORS —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: ${text}`);
        setCorsStatus('success');
        console.log('‚úÖ CORS —É—Å–ø–µ—à–Ω–æ:', text);
      } else {
        setCorsResult(`‚ùå –û—à–∏–±–∫–∞: ${response.status} - ${response.statusText}`);
        setCorsStatus('error');
        console.error('‚ùå CORS –æ—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('‚ùå CORS –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
      setCorsResult(`‚ùå CORS –æ—à–∏–±–∫–∞: ${error}`);
      setCorsStatus('error');
    }
  };

  const testApi = async () => {
    setApiStatus('loading');
    setApiResult('');
    
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç API...');
      
      // –ó–∞–ø—Ä–æ—Å –∫ API –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
      const response = await apiClient.get('/sites/');
      console.log('üì° API –æ—Ç–≤–µ—Ç:', response);
      
      setApiResult(`‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª: ${JSON.stringify(response)}`);
      setApiStatus('success');
    } catch (error: any) {
      console.error('‚ùå API –æ—à–∏–±–∫–∞:', error);
      console.error('‚ùå API error.response:', error.response);
      console.error('‚ùå API error.message:', error.message);
      
      if (error.response?.status === 401) {
        setApiResult(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)`);
        setApiStatus('success');
        console.log('‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      } else if (error.message.includes('CORS')) {
        setApiResult(`‚ùå CORS –æ—à–∏–±–∫–∞ –≤ API: ${error.message}`);
        setApiStatus('error');
      } else {
        setApiResult(`‚ùå API –æ—à–∏–±–∫–∞: ${error.message}`);
        setApiStatus('error');
      }
    }
  };

  const testAuth = async () => {
    setAuthStatus('loading');
    setAuthResult('');
    
    try {

      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ api –∏–∑ axios.config
      const response = await api.post('/auth/token/', {
        email: testEmail,
        password: testPassword,
      });
      
      setAuthResult(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${(response as any).access?.substring(0, 20)}...`);
      setAuthStatus('success');
      
    } catch (error: any) {
      
      if (error.message && error.message.includes('CORS')) {
        setAuthResult(`‚ùå CORS –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        setAuthStatus('error');
      } else if (error.response?.status === 400) {
        setAuthResult(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ credentials (400): ${error.response.data?.detail || '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}`);
        setAuthStatus('error');
      } else if (error.code === 'ERR_NETWORK') {
        setAuthResult(`‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ CORS): ${error.message}`);
        setAuthStatus('error');
      } else {
        setAuthResult(`‚ùå Auth –æ—à–∏–±–∫–∞: ${error.message}`);
        setAuthStatus('error');
      }
    }
  };

  const testAxiosDirectly = async () => {
    try {
      console.log('üîç –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç axios...');
      
      const response = await fetch('http://localhost:8000/api/v1/sites/', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Origin': 'http://localhost:5173',
        },
        credentials: 'include',
      });
      
      console.log('üì° –ü—Ä—è–º–æ–π fetch –æ—Ç–≤–µ—Ç:', response);
      console.log('üì° –ü—Ä—è–º–æ–π fetch —Å—Ç–∞—Ç—É—Å:', response.status);
      console.log('üì° –ü—Ä—è–º–æ–π fetch headers:', [...response.headers.entries()]);
      
      const data = await response.json();
      console.log('üì° –ü—Ä—è–º–æ–π fetch –¥–∞–Ω–Ω—ã–µ:', data);
      
    } catch (error) {
      console.error('‚ùå –ü—Ä—è–º–æ–π fetch –æ—à–∏–±–∫–∞:', error);
    }
  };

  const diagnostics = [
    {
      name: 'Auth Store',
      status: authStore.isAuthenticated ? 'OK' : 'Not authenticated',
      loading: authStore.isLoading,
      error: authStore.error,
      data: {
        user: authStore.user?.email || 'null',
        isAuthenticated: authStore.isAuthenticated,
      }
    },
    {
      name: 'Global Settings',
      status: globalSettings.settingsLoaded ? 'OK' : 'Not loaded',
      loading: globalSettings.isSettingsLoading,
      error: globalSettings.settingsError,
      data: {
        settingsCount: Object.keys(globalSettings.settings).length,
        socialNetworksCount: globalSettings.socialNetworks.length,
        settingsLoaded: globalSettings.settingsLoaded,
        socialLoaded: globalSettings.socialLoaded,
      }
    },
    {
      name: 'Sites Store',
      status: sitesStore.sites.length > 0 ? 'OK' : 'No sites',
      loading: sitesStore.isLoading,
      error: sitesStore.error,
      data: {
        sitesCount: sitesStore.sites.length,
        loaded: sitesStore.sites.length > 0 || sitesStore.error !== null,
      }
    },
    {
      name: 'Posts Store',
      status: 'Not checked',
      loading: postsStore.isLoading,
      error: postsStore.error,
      data: {
        postsCount: postsStore.posts.length,
        loaded: postsStore.posts.length > 0 || postsStore.error !== null,
      }
    }
  ];

  return (
    <DashboardLayout title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞">
      <div className="space-y-6">
        <div className="flex items-center space-x-3">
          <Icon name="settings" className="text-blue-600" size="lg" />
          <h1 className="text-2xl font-bold text-gray-900">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h1>
        </div>

        <div className="grid gap-6 md:grid-cols-2">
          {diagnostics.map((item) => (
            <div
              key={item.name}
              className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900">{item.name}</h3>
                <div className="flex items-center space-x-2">
                  {item.loading && (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                  )}
                  <span
                    className={`px-2 py-1 text-xs font-medium rounded-full ${
                      item.error
                        ? 'bg-red-100 text-red-800'
                        : item.status === 'OK'
                        ? 'bg-green-100 text-green-800'
                        : 'bg-yellow-100 text-yellow-800'
                    }`}
                  >
                    {item.error ? '–û—à–∏–±–∫–∞' : item.status}
                  </span>
                </div>
              </div>

              {item.error && (
                <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-sm text-red-800">{item.error}</p>
                </div>
              )}

              <div className="space-y-2">
                {Object.entries(item.data).map(([key, value]) => (
                  <div key={key} className="flex justify-between text-sm">
                    <span className="text-gray-600">{key}:</span>
                    <span className="font-medium text-gray-900">
                      {typeof value === 'boolean' ? (value ? 'true' : 'false') : String(value)}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <div className="flex items-start space-x-3">
            <Icon name="info" className="text-blue-600 mt-0.5" size="md" />
            <div>
              <h4 className="text-sm font-medium text-blue-900">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
              <p className="text-sm text-blue-800 mt-1">
                –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö store –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. 
                –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ store –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏–ª–∏ –∑–∞—Å—Ç—Ä—è–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏, 
                —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å API –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã.
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
          <div className="grid gap-3 sm:grid-cols-2 lg:grid-cols-4">
            <button
              onClick={() => globalSettings.loadAll()}
              className="flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Icon name="refresh" size="sm" className="mr-2" />
              –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>
            
            <button
              onClick={() => sitesStore.fetchSites()}
              className="flex items-center justify-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              <Icon name="refresh" size="sm" className="mr-2" />
              –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–π—Ç—ã
            </button>

            <button
              onClick={() => window.location.reload()}
              className="flex items-center justify-center px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
            >
              <Icon name="refresh" size="sm" className="mr-2" />
              –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>

            <button
              onClick={() => {
                localStorage.clear();
                window.location.href = '/login';
              }}
              className="flex items-center justify-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              <Icon name="logout" size="sm" className="mr-2" />
              –û—á–∏—Å—Ç–∏—Ç—å –∏ –≤—ã–π—Ç–∏
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* CORS Test */}
          <Card>
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <Icon name="globe" className="mr-2" />
                –¢–µ—Å—Ç CORS
              </h2>
              <p className="text-sm text-gray-600 mb-4">
                –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤–æ–µ CORS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å backend
              </p>
              
              <Button
                onClick={testCors}
                disabled={corsStatus === 'loading'}
                className="mb-4 w-full"
                variant="primary"
              >
                <Icon name={corsStatus === 'loading' ? 'refresh' : 'play'} className="mr-2" />
                {corsStatus === 'loading' ? '–ü—Ä–æ–≤–µ—Ä—è—é...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å CORS'}
              </Button>

              {corsResult && (
                <div className={`p-3 rounded-lg text-sm ${
                  corsStatus === 'success' 
                    ? 'bg-green-50 text-green-800 border border-green-200' 
                    : 'bg-red-50 text-red-800 border border-red-200'
                }`}>
                  {corsResult}
                </div>
              )}
            </div>
          </Card>

          {/* API Test */}
          <Card>
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <Icon name="database" className="mr-2" />
                –¢–µ—Å—Ç API
              </h2>
              <p className="text-sm text-gray-600 mb-4">
                –ü—Ä–æ–≤–µ—Ä—è–µ—Ç API endpoints —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
              </p>
              
              <Button
                onClick={testApi}
                disabled={apiStatus === 'loading'}
                className="mb-4 w-full"
                variant="secondary"
              >
                <Icon name={apiStatus === 'loading' ? 'refresh' : 'database'} className="mr-2" />
                {apiStatus === 'loading' ? '–ü—Ä–æ–≤–µ—Ä—è—é...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API'}
              </Button>

              {apiResult && (
                <div className={`p-3 rounded-lg text-sm ${
                  apiStatus === 'success' 
                    ? 'bg-green-50 text-green-800 border border-green-200' 
                    : 'bg-red-50 text-red-800 border border-red-200'
                }`}>
                  {apiResult}
                </div>
              )}
            </div>
          </Card>

          {/* Auth Test */}
          <Card className="mb-6">
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <Icon name="lock" className="mr-2" />
                –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </h2>
              <p className="text-sm text-gray-600 mb-4">
                –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /auth/token/ endpoint
              </p>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                  <Input
                    type="email"
                    value={testEmail}
                    onChange={(e) => setTestEmail(e.target.value)}
                    placeholder="test@example.com"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
                  <Input
                    type="password"
                    value={testPassword}
                    onChange={(e) => setTestPassword(e.target.value)}
                    placeholder="password"
                  />
                </div>
              </div>
              
              <Button
                onClick={testAuth}
                disabled={authStatus === 'loading'}
                className="mb-4 w-full"
                variant="danger"
              >
                <Icon name={authStatus === 'loading' ? 'refresh' : 'login'} className="mr-2" />
                {authStatus === 'loading' ? '–ü—Ä–æ–≤–µ—Ä—è—é...' : '–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'}
              </Button>

              {authResult && (
                <div className={`p-3 rounded-lg text-sm ${
                  authStatus === 'success' 
                    ? 'bg-green-50 text-green-800 border border-green-200' 
                    : 'bg-red-50 text-red-800 border border-red-200'
                }`}>
                  {authResult}
                </div>
              )}
            </div>
          </Card>

          {/* Direct Test */}
          <Card className="mb-6">
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <Icon name="code" className="mr-2" />
                –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç
              </h2>
              <p className="text-sm text-gray-600 mb-4">
                –ü—Ä—è–º–æ–π fetch –∑–∞–ø—Ä–æ—Å –∫ API
              </p>
              
              <Button
                onClick={testAxiosDirectly}
                className="mb-4 w-full"
                variant="secondary"
              >
                <Icon name="play" className="mr-2" />
                –ü—Ä—è–º–æ–π fetch
              </Button>

              <div className="text-xs text-gray-500">
                –°–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12)
              </div>
            </div>
          </Card>
        </div>

        {/* Connection Info */}
        <Card className="mt-6">
          <div className="p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <Icon name="info" className="mr-2" />
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <p className="font-medium text-gray-700">Frontend URL:</p>
                <p className="text-gray-600 font-mono">http://localhost:5173</p>
              </div>
              <div>
                <p className="font-medium text-gray-700">Backend URL:</p>
                <p className="text-gray-600 font-mono">http://localhost:8000</p>
              </div>
              <div>
                <p className="font-medium text-gray-700">API Base URL:</p>
                <p className="text-gray-600 font-mono">http://localhost:8000/api/v1</p>
              </div>
              <div>
                <p className="font-medium text-gray-700">Database:</p>
                <p className="text-gray-600">MySQL (Production)</p>
              </div>
            </div>

            <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <h3 className="font-medium text-blue-900 mb-2">üí° –°–æ–≤–µ—Ç—ã –ø–æ –æ—Ç–ª–∞–¥–∫–µ CORS:</h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤</li>
                <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫—É Network –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤</li>
                <li>‚Ä¢ CORS –æ—à–∏–±–∫–∏ –æ–±—ã—á–Ω–æ –≤–∏–¥–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –∫–∞–∫ –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç</li>
                <li>‚Ä¢ Preflight –∑–∞–ø—Ä–æ—Å—ã (OPTIONS) –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200</li>
                <li>‚Ä¢ –ü—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ credentials –≤–∫–ª—é—á–µ–Ω—ã</li>
              </ul>
            </div>
          </div>
        </Card>
      </div>
    </DashboardLayout>
  );
};

export default Debug; 