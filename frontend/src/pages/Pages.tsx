import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import DashboardLayout from '../components/layout/DashboardLayout';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import { useAuthStore, usePagesStore } from '../store';
import type { PageStatus } from '../types';

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
 */
const Pages: React.FC = () => {
  const { user } = useAuthStore();
  const navigate = useNavigate();
  const { 
    pages, 
    isLoading, 
    error, 
    fetchPages, 
    deletePage, 
    changeStatus,
    setHomepage,
    clearError 
  } = usePagesStore();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchPages();
  }, [fetchPages]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  useEffect(() => {
    if (error) {
      // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ UI, –æ—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      const timer = setTimeout(() => {
        clearError();
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [error, clearError]);

  const handleDeletePage = async (pageId: number) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É?')) {
      return;
    }

    try {
      await deletePage(pageId);
    } catch {
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ store
    }
  };

  const togglePageStatus = async (pageId: number, currentStatus: PageStatus) => {
    const newStatus: PageStatus = currentStatus === 'published' ? 'draft' : 'published';
    try {
      await changeStatus(pageId, newStatus);
    } catch {
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ store
    }
  };

  const handleSetHomepage = async (pageId: number) => {
    try {
      await setHomepage(pageId);
    } catch {
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ store
    }
  };

  const handleCreatePage = () => {
    navigate('/pages/create');
  };

  const handleEditPage = (pageId: number) => {
    navigate(`/pages/${pageId}/edit`);
  };

  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏</h1>
            <p className="mt-1 text-sm text-gray-600">
              –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–∞—à–∏—Ö —Å–∞–π—Ç–æ–≤
            </p>
          </div>
          <Button variant="primary" onClick={handleCreatePage}>
            + –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </Button>
        </div>

        {/* Error message */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <span className="text-red-400">‚ö†Ô∏è</span>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">–û—à–∏–±–∫–∞</h3>
                <div className="mt-2 text-sm text-red-700">
                  {error}
                </div>
              </div>
            </div>
          </div>
        )}

        {pages.length === 0 ? (
          <Card>
            <div className="text-center py-12">
              <span className="text-6xl mb-4 block">üìÑ</span>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                –ù–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
              </h3>
              <p className="text-gray-500 mb-4">
                –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
              </p>
              <Button variant="primary" onClick={handleCreatePage}>
                –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
              </Button>
            </div>
          </Card>
        ) : (
          <Card>
            <div className="overflow-hidden">
              <div className="px-4 py-5 sm:p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">
                  –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({pages.length})
                </h3>
                
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          –°—Ç–∞—Ç—É—Å
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          –ù–∞–∑–≤–∞–Ω–∏–µ
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          –°–∞–π—Ç
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          –¢–∏–ø
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          –ê–≤—Ç–æ—Ä
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                        </th>
                        <th scope="col" className="px-6 py-3 text-right text-sm font-medium">
                          –î–µ–π—Å—Ç–≤–∏—è
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {pages.map((page) => (
                        <tr key={page.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            <span
                              className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                page.status === 'published'
                                  ? 'bg-green-100 text-green-800'
                                  : 'bg-yellow-100 text-yellow-800'
                              }`}
                            >
                              {page.status === 'published' ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              {page.is_homepage && (
                                <span className="mr-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                                  üè† –ì–ª–∞–≤–Ω–∞—è
                                </span>
                              )}
                              <span className="text-sm font-medium text-gray-900">
                                {page.title}
                              </span>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {page.site_name || '–ë–µ–∑ —Å–∞–π—Ç–∞'}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {page.parent_title ? (
                              <span>–î–æ—á–µ—Ä–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</span>
                            ) : (
                              <span>–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</span>
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {page.author_name}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-500">
                            {new Date(page.created_at).toLocaleDateString('ru-RU')}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <div className="flex justify-end space-x-2">
                              {!page.is_homepage && (
                                <button
                                  onClick={() => handleSetHomepage(page.id)}
                                  className="text-blue-600 hover:text-blue-900 text-xs"
                                  disabled={isLoading}
                                >
                                  –°–¥–µ–ª–∞—Ç—å –≥–ª–∞–≤–Ω–æ–π
                                </button>
                              )}
                              <button
                                onClick={() => togglePageStatus(page.id, page.status)}
                                className="text-indigo-600 hover:text-indigo-900 text-xs"
                                disabled={isLoading}
                              >
                                {page.status === 'published' ? '–°–∫—Ä—ã—Ç—å' : '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}
                              </button>
                              <button 
                                onClick={() => handleEditPage(page.id)}
                                className="text-indigo-600 hover:text-indigo-900 text-xs"
                              >
                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                              </button>
                              {(user?.role?.name === 'superuser' || user?.id) && (
                                <button
                                  onClick={() => handleDeletePage(page.id)}
                                  className="text-red-600 hover:text-red-900 text-xs"
                                  disabled={isLoading}
                                >
                                  –£–¥–∞–ª–∏—Ç—å
                                </button>
                              )}
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </Card>
        )}

        {/* Stats */}
        {pages.length > 0 && (
          <Card>
            <div className="p-4">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
              </h3>
              <div className="grid grid-cols-1 sm:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">
                    {pages.length}
                  </div>
                  <div className="text-sm text-gray-600">–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {pages.filter(page => page.status === 'published').length}
                  </div>
                  <div className="text-sm text-gray-600">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-yellow-600">
                    {pages.filter(page => page.status === 'draft').length}
                  </div>
                  <div className="text-sm text-gray-600">–ß–µ—Ä–Ω–æ–≤–∏–∫–∏</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">
                    {pages.filter(page => page.is_homepage).length}
                  </div>
                  <div className="text-sm text-gray-600">–ì–ª–∞–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü</div>
                </div>
              </div>
            </div>
          </Card>
        )}
      </div>
    </DashboardLayout>
  );
};

export default Pages; 