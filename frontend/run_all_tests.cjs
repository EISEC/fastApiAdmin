#!/usr/bin/env node

/**
 * –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node run_all_tests.cjs
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

const log = {
  info: (msg) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg) => console.log(`‚úÖ ${msg}`),
  error: (msg) => console.log(`‚ùå ${msg}`),
  warning: (msg) => console.log(`‚ö†Ô∏è  ${msg}`),
  divider: () => console.log('‚îÄ'.repeat(60)),
  title: (msg) => console.log(`\nüéØ ${msg}\n`)
};

/**
 * –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –≤ shell
 */
function runCommand(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    const proc = spawn(command, args, {
      stdio: 'pipe',
      shell: true,
      ...options
    });
    
    let stdout = '';
    let stderr = '';
    
    proc.stdout.on('data', (data) => {
      stdout += data.toString();
    });
    
    proc.stderr.on('data', (data) => {
      stderr += data.toString();
    });
    
    proc.on('close', (code) => {
      if (code === 0) {
        resolve({ stdout, stderr, code });
      } else {
        reject({ stdout, stderr, code });
      }
    });
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
 */
function fileExists(filePath) {
  return fs.existsSync(filePath);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runAllTests() {
  log.title('–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ó–ê–ü–†–û–°–û–í –î–û–°–¢–£–ü–ê –ö –°–ê–ô–¢–ê–ú');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
  log.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...');
  
  const requiredFiles = [
    'quick_api_test.cjs',
    'test_site_requests_api.cjs',
    'testing_plan.md'
  ];
  
  for (const file of requiredFiles) {
    if (!fileExists(file)) {
      log.error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: ${file}`);
      return;
    }
  }
  
  log.success('–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã');
  log.divider();
  
  // –¢–µ—Å—Ç 1: TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è
  log.title('–®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê TYPESCRIPT –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò');
  try {
    const { stdout } = await runCommand('yarn', ['tsc', '--noEmit']);
    log.success('TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log(stdout);
  } catch (error) {
    log.error('–û—à–∏–±–∫–∏ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:');
    console.log(error.stderr);
    log.warning('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏ TS...');
  }
  log.divider();
  
  // –¢–µ—Å—Ç 2: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API
  log.title('–®–ê–ì 2: –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê API');
  try {
    const { stdout } = await runCommand('node', ['quick_api_test.cjs']);
    console.log(stdout);
    
    if (stdout.includes('‚úÖ API –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é')) {
      log.success('Backend API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
    } else {
      log.warning('Backend –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ API:');
    console.log(error.stdout);
    log.info('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω: cd ../backend && python3 manage.py runserver 8000');
    log.warning('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
    log.divider();
    return;
  }
  log.divider();
  
  // –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
  log.title('–®–ê–ì 3: –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API');
  try {
    const { stdout } = await runCommand('node', ['test_site_requests_api.cjs']);
    console.log(stdout);
    
    if (stdout.includes('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')) {
      log.success('–ü–æ–ª–Ω–æ–µ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } else {
      log.warning('–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
    }
  } catch (error) {
    log.error('–û—à–∏–±–∫–∏ –≤ –ø–æ–ª–Ω–æ–º API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:');
    console.log(error.stdout);
    console.log(error.stderr);
  }
  log.divider();
  
  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
  log.title('–®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –°–ò–°–¢–ï–ú–´ –ó–ê–ü–†–û–°–û–í');
  
  const projectFiles = [
    'src/types/siteRequest.types.ts',
    'src/services/siteRequest.service.ts',
    'src/store/siteRequestStore.ts',
    'src/components/forms/SiteRequestForm.tsx',
    'src/pages/SiteRequestCreate.tsx',
    'src/pages/MyRequests.tsx',
    'src/pages/RequestsManagement.tsx',
    'src/pages/SiteRequestsDemo.tsx'
  ];
  
  const existingFiles = [];
  const missingFiles = [];
  
  for (const file of projectFiles) {
    if (fileExists(file)) {
      existingFiles.push(file);
    } else {
      missingFiles.push(file);
    }
  }
  
  log.info(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${existingFiles.length}/${projectFiles.length}`);
  existingFiles.forEach(file => log.success(`‚úì ${file}`));
  
  if (missingFiles.length > 0) {
    log.warning('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:');
    missingFiles.forEach(file => log.error(`‚úó ${file}`));
  }
  
  log.divider();
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  log.title('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  
  console.log('üß™ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –¢–ï–°–¢–´:');
  log.info('‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è');
  log.info('‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API');
  log.info('‚úÖ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API');
  log.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞');
  
  console.log('\nüìã –ì–û–¢–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:');
  log.info('‚úÖ Backend API (8 endpoints)');
  log.info('‚úÖ Frontend —Ç–∏–ø—ã –∏ —Å–µ—Ä–≤–∏—Å—ã');
  log.info('‚úÖ Zustand store –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è');
  log.info('‚úÖ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Ñ–æ—Ä–º—ã');
  log.info('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –º–∞—Ä—à—Ä—É—Ç—ã');
  log.info('‚úÖ –î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  
  console.log('\nüöÄ –î–õ–Ø UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  log.info('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: yarn dev');
  log.info('2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5174');
  log.info('3. –í–æ–π–¥–∏—Ç–µ: pipka@eisec.ru / Pipi1234');
  log.info('4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞: /site-requests/demo');
  
  console.log('\nüìñ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
  log.info('üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω: testing_plan.md');
  log.info('üîß API —Å–∫—Ä–∏–ø—Ç—ã: quick_api_test.cjs, test_site_requests_api.cjs');
  log.info('üé® –î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞: /site-requests/demo');
  
  log.divider();
  log.success('üéâ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  runAllTests().catch(error => {
    log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.error(error);
    process.exit(1);
  });
} 