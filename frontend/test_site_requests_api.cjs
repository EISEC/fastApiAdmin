/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç–∞–º
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test_site_requests_api.js
 */

const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://127.0.0.1:8000/api/v1';
const TEST_USER = {
  email: 'pipka@eisec.ru',
  password: 'Pipi1234'
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let authToken = null;
let testRequestId = null;

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const log = {
  info: (msg) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg) => console.log(`‚úÖ ${msg}`),
  error: (msg) => console.log(`‚ùå ${msg}`),
  warning: (msg) => console.log(`‚ö†Ô∏è  ${msg}`),
  divider: () => console.log('‚îÄ'.repeat(50))
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ Axios –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
 */
const createApiClient = () => {
  return axios.create({
    baseURL: BASE_URL,
    headers: authToken ? {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    } : {
      'Content-Type': 'application/json'
    }
  });
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function login() {
  log.info('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    const api = createApiClient();
    const response = await api.post('/auth/token/', TEST_USER);
    
    authToken = response.data.access;
    log.success(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.`);
    log.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${TEST_USER.email}`);
    
    return true;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.response?.data?.detail || error.message}`);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
 */
async function testAvailableSites() {
  log.info('–¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤');
  
  try {
    const api = createApiClient();
    const response = await api.get('/sites/requests/available_sites/');
    
    log.success(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤`);
    
    if (response.data.length > 0) {
      log.info('–ü—Ä–∏–º–µ—Ä—ã —Å–∞–π—Ç–æ–≤:');
      response.data.slice(0, 3).forEach(site => {
        log.info(`  - ${site.name} (${site.domain})`);
      });
    }
    
    return response.data;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤: ${error.response?.status} ${error.response?.statusText}`);
    return [];
  }
}

/**
 * –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function testMyRequests() {
  log.info('–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
  
  try {
    const api = createApiClient();
    const response = await api.get('/sites/requests/my_requests/');
    
    log.success(`–ù–∞–π–¥–µ–Ω–æ ${response.data.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    
    if (response.data.length > 0) {
      log.info('–°—Ç–∞—Ç—É—Å—ã –∑–∞–ø—Ä–æ—Å–æ–≤:');
      const statusCount = {};
      response.data.forEach(req => {
        statusCount[req.status] = (statusCount[req.status] || 0) + 1;
      });
      
      Object.entries(statusCount).forEach(([status, count]) => {
        log.info(`  - ${status}: ${count}`);
      });
    }
    
    return response.data;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: ${error.response?.status} ${error.response?.statusText}`);
    return [];
  }
}

/**
 * –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
async function testCreateRequest(availableSites) {
  log.info('–¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
  
  if (!availableSites || availableSites.length === 0) {
    log.warning('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
    return null;
  }
  
  const testSite = availableSites[0];
  
  try {
    const api = createApiClient();
    const requestData = {
      site: testSite.id,
      requested_role: 'author',
      message: `–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç ${TEST_USER.email} - ${new Date().toISOString()}`
    };
    
    const response = await api.post('/sites/requests/', requestData);
    
    testRequestId = response.data.id;
    log.success(`–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —Å ID: ${testRequestId}`);
    log.info(`–°–∞–π—Ç: ${testSite.name}`);
    log.info(`–†–æ–ª—å: ${requestData.requested_role}`);
    log.info(`–°—Ç–∞—Ç—É—Å: ${response.data.status}`);
    
    return response.data;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${error.response?.data?.message || error.message}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
    if (error.response?.data) {
      Object.entries(error.response.data).forEach(([field, errors]) => {
        if (Array.isArray(errors)) {
          errors.forEach(err => log.error(`  ${field}: ${err}`));
        }
      });
    }
    
    return null;
  }
}

/**
 * –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞
 */
async function testRequestDetails() {
  if (!testRequestId) {
    log.warning('–ù–µ—Ç ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π');
    return null;
  }
  
  log.info(`–¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞ ID: ${testRequestId}`);
  
  try {
    const api = createApiClient();
    const response = await api.get(`/sites/requests/${testRequestId}/`);
    
    log.success('–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã');
    log.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${response.data.user_name}`);
    log.info(`–°–∞–π—Ç: ${response.data.site_name}`);
    log.info(`–†–æ–ª—å: ${response.data.requested_role}`);
    log.info(`–°—Ç–∞—Ç—É—Å: ${response.data.status}`);
    log.info(`–°–æ–∑–¥–∞–Ω: ${new Date(response.data.created_at).toLocaleString('ru-RU')}`);
    
    return response.data;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: ${error.response?.status} ${error.response?.statusText}`);
    return null;
  }
}

/**
 * –¢–µ—Å—Ç 5: –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞
 */
async function testCancelRequest() {
  if (!testRequestId) {
    log.warning('–ù–µ—Ç ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã');
    return false;
  }
  
  log.info(`–¢–µ—Å—Ç 5: –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ ID: ${testRequestId}`);
  
  try {
    const api = createApiClient();
    await api.post(`/sites/requests/${testRequestId}/cancel_request/`);
    
    log.success('–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω');
    return true;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞: ${error.response?.data?.message || error.message}`);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
async function testPendingReviews() {
  log.info('–¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ');
  
  try {
    const api = createApiClient();
    const response = await api.get('/sites/requests/pending_reviews/');
    
    log.success(`–ù–∞–π–¥–µ–Ω–æ ${response.data.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ`);
    
    if (response.data.length > 0) {
      log.info('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:');
      response.data.slice(0, 3).forEach(req => {
        log.info(`  - ${req.user_name} ‚Üí ${req.site_name} (${req.requested_role})`);
      });
    }
    
    return response.data;
  } catch (error) {
    if (error.response?.status === 403) {
      log.warning('–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø—Ä–æ—Å–∞–º –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)');
    } else {
      log.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: ${error.response?.status} ${error.response?.statusText}`);
    }
    return [];
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –°–ò–°–¢–ï–ú–´ –ó–ê–ü–†–û–°–û–í –î–û–°–¢–£–ü–ê –ö –°–ê–ô–¢–ê–ú');
  log.divider();
  
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const loginSuccess = await login();
  if (!loginSuccess) {
    log.error('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    return;
  }
  
  log.divider();
  
  // –¢–µ—Å—Ç—ã API
  const availableSites = await testAvailableSites();
  log.divider();
  
  await testMyRequests();
  log.divider();
  
  const newRequest = await testCreateRequest(availableSites);
  log.divider();
  
  if (newRequest) {
    await testRequestDetails();
    log.divider();
  }
  
  await testPendingReviews();
  log.divider();
  
  if (testRequestId) {
    await testCancelRequest();
    log.divider();
  }
  
  log.success('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
  console.log('\nüìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  log.info(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${loginSuccess ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
  log.info(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã: ${availableSites.length}`);
  log.info(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: ${newRequest ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
  log.info(`üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞: ${testRequestId ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
  log.info(`‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: ${testRequestId ? '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ' : '–ü—Ä–æ–ø—É—â–µ–Ω–æ'}`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(error => {
    log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  });
}

module.exports = {
  runTests,
  login,
  testAvailableSites,
  testMyRequests,
  testCreateRequest,
  testRequestDetails,
  testCancelRequest,
  testPendingReviews
}; 