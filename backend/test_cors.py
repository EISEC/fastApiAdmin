#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
"""

import requests
import json
from urllib.parse import urljoin

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
API_BASE_URL = "https://admin.ifuw.ru/api/v1/"
TEST_DOMAINS = [
    "https://ifuw.ru",
    "https://www.ifuw.ru", 
    "https://admin.ifuw.ru",
    "https://www.admin.ifuw.ru"
]

def test_cors_preflight(origin_domain):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç preflight CORS –∑–∞–ø—Ä–æ—Å"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS preflight –¥–ª—è {origin_domain}")
    
    try:
        # OPTIONS –∑–∞–ø—Ä–æ—Å –¥–ª—è preflight
        response = requests.options(
            urljoin(API_BASE_URL, "sites/"),
            headers={
                'Origin': origin_domain,
                'Access-Control-Request-Method': 'GET',
                'Access-Control-Request-Headers': 'authorization,content-type',
            },
            timeout=10
        )
        
        print(f"   Status: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        cors_headers = {
            'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
            'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
            'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers'),
            'Access-Control-Allow-Credentials': response.headers.get('Access-Control-Allow-Credentials'),
        }
        
        print(f"   CORS Headers: {cors_headers}")
        
        if response.status_code == 200:
            print("   ‚úÖ CORS preflight —É—Å–ø–µ—à–µ–Ω")
            return True
        else:
            print(f"   ‚ùå CORS preflight –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_actual_request(origin_domain):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å"""
    print(f"\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {origin_domain}")
    
    try:
        # GET –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.get(
            urljoin(API_BASE_URL, "sites/"),
            headers={
                'Origin': origin_domain,
                'Content-Type': 'application/json',
            },
            timeout=10
        )
        
        print(f"   Status: {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        cors_origin = response.headers.get('Access-Control-Allow-Origin')
        print(f"   Access-Control-Allow-Origin: {cors_origin}")
        
        if response.status_code in [200, 401]:  # 401 –æ–∂–∏–¥–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            print("   ‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (CORS —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            return True
        else:
            print(f"   ‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            print(f"   Response: {response.text[:200]}...")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞ ifuw.ru")
    print(f"API URL: {API_BASE_URL}")
    print("=" * 60)
    
    results = {}
    
    for domain in TEST_DOMAINS:
        print(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞: {domain}")
        print("-" * 40)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º preflight
        preflight_ok = test_cors_preflight(domain)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        request_ok = test_actual_request(domain)
        
        results[domain] = {
            'preflight': preflight_ok,
            'request': request_ok,
            'overall': preflight_ok and request_ok
        }
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    for domain, result in results.items():
        status = "‚úÖ OK" if result['overall'] else "‚ùå FAIL"
        print(f"{domain}: {status}")
        if not result['overall']:
            issues = []
            if not result['preflight']:
                issues.append("preflight")
            if not result['request']:
                issues.append("request")
            print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(issues)}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    failed_domains = [d for d, r in results.items() if not r['overall']]
    if failed_domains:
        print(f"\n‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–º–µ–Ω–∞–º–∏: {', '.join(failed_domains)}")
        print(f"   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CORS_ALLOWED_ORIGINS –≤ settings/production.py")
        print(f"   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ALLOWED_HOSTS –≤ settings/production.py") 
        print(f"   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ corsheaders.middleware.CorsMiddleware –ø–µ—Ä–≤—ã–π –≤ MIDDLEWARE")
        print(f"   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Django —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print(f"\nüéâ –í—Å–µ –¥–æ–º–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    main() 