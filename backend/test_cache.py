#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è API
"""
import os
import sys
import time
import requests
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/eisec/fastApiAdmin/backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.development')

import django
django.setup()

from django.core.cache import cache
from apps.settings.utils import get_cache_enabled, get_cache_timeout

def test_cache_settings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞"""
    print("=== Testing Cache Settings ===")
    print(f"Cache enabled: {get_cache_enabled()}")
    print(f"Cache timeout: {get_cache_timeout()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫—ç—à—É
    test_key = "test_cache_key"
    test_value = {"message": "Hello Cache!", "timestamp": time.time()}
    
    cache.set(test_key, test_value, 60)
    retrieved = cache.get(test_key)
    
    print(f"Cache test - Set: {test_value}")
    print(f"Cache test - Get: {retrieved}")
    print(f"Cache working: {'‚úÖ' if retrieved == test_value else '‚ùå'}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
    cache.delete(test_key)
    print()

def test_api_cache():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ API —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã"""
    print("=== Testing API Cache ===")
    
    base_url = "http://localhost:8000"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –±—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ endpoints
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
    test_endpoints = [
        "/api/cache/stats/",  # –ù–∞—à –Ω–æ–≤—ã–π endpoint
    ]
    
    for endpoint in test_endpoints:
        url = base_url + endpoint
        print(f"\nTesting endpoint: {endpoint}")
        
        try:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MISS)
            print("First request (expecting MISS)...")
            response1 = requests.get(url, timeout=5)
            print(f"Status: {response1.status_code}")
            print(f"X-Cache header: {response1.headers.get('X-Cache', 'Not set')}")
            
            # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HIT)
            print("Second request (expecting HIT)...")
            response2 = requests.get(url, timeout=5)
            print(f"Status: {response2.status_code}")
            print(f"X-Cache header: {response2.headers.get('X-Cache', 'Not set')}")
            
            if response1.status_code == 200 and response2.status_code == 200:
                print("‚úÖ API requests successful")
            else:
                print("‚ùå API requests failed")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Request failed: {e}")
        except Exception as e:
            print(f"‚ùå Unexpected error: {e}")

def test_cache_stats():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
    print("=== Testing Cache Stats ===")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Django
        stats = cache.get('cache_stats', {})
        print(f"Current cache stats: {stats}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
        print("\nTesting cache invalidation patterns...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
        test_keys = [
            "api_cache:_api_sites_",
            "api_cache:_api_posts_",
            "api_cache:_api_dashboard_",
        ]
        
        for key in test_keys:
            cache.set(key, {"test": "data"}, 300)
            print(f"Set test key: {key}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã
        print("\nChecking test keys...")
        for key in test_keys:
            value = cache.get(key)
            print(f"Key {key}: {'exists' if value else 'missing'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        pattern = "api_cache:*"
        try:
            keys = cache.keys(pattern)
            print(f"\nKeys matching pattern '{pattern}': {len(keys)} found")
            for key in keys[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  - {key}")
        except Exception as e:
            print(f"Pattern search failed: {e}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
        cache.delete_many(test_keys)
        print("\nCleaned up test keys")
        
    except Exception as e:
        print(f"‚ùå Cache stats test failed: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Starting Cache System Tests")
    print("=" * 50)
    
    test_cache_settings()
    test_cache_stats()
    test_api_cache()
    
    print("\n" + "=" * 50)
    print("‚úÖ Cache tests completed!")

if __name__ == "__main__":
    main() 