#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π
"""
import os
import sys
import django
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.development')
django.setup()

# –î–æ–±–∞–≤–ª—è–µ–º testserver –≤ ALLOWED_HOSTS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from django.conf import settings
if 'testserver' not in settings.ALLOWED_HOSTS:
    settings.ALLOWED_HOSTS.append('testserver')

# –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from django.test import Client
from django.contrib.auth import get_user_model
from rest_framework.test import APIClient
from rest_framework_simplejwt.tokens import RefreshToken

from apps.dynamic_models.models import DynamicModel, DynamicModelData, DynamicFieldType
from apps.sites.models import Site
from apps.accounts.models import CustomUser, Role


def get_jwt_token(user):
    """–ü–æ–ª—É—á–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    refresh = RefreshToken.for_user(user)
    return str(refresh.access_token)


def test_dynamic_models_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints"""
    
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π...\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        superuser_role = Role.objects.get(name='superuser')
        user = CustomUser.objects.filter(role=superuser_role).first()
        if not user:
            print("‚ùå –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é superuser")
            return
    except Role.DoesNotExist:
        print("‚ùå –†–æ–ª—å superuser –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–æ–ª–µ–π")
        return
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    client = APIClient()
    token = get_jwt_token(user)
    client.credentials(HTTP_AUTHORIZATION=f'Bearer {token}')
    
    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ {user.email} (—Ä–æ–ª—å: {user.role.name})")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    models = {'results': []}
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint field-types...")
    try:
        response = client.get('/api/v1/dynamic-models/field-types/')
        if response.status_code == 200:
            field_types = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(field_types['results'])} —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π")
            for ft in field_types['results'][:3]:
                print(f"   ‚Ä¢ {ft['label']} ({ft['name']}) - –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {ft['category']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π: {response.status_code}")
            print(f"   –î–µ—Ç–∞–ª–∏: {response.content.decode()[:200]}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ field-types: {e}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    print("\nüèóÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint models...")
    try:
        response = client.get('/api/v1/dynamic-models/models/')
        if response.status_code == 200:
            models = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(models['results'])} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π")
            for model in models['results']:
                print(f"   ‚Ä¢ {model['name']} ({model['model_type']}) - –ø–æ–ª–µ–π: {model['fields_count']}, –∑–∞–ø–∏—Å–µ–π: {model['data_entries_count']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {response.status_code}")
            if response.content:
                print(f"   –î–µ—Ç–∞–ª–∏: {response.content.decode()[:200]}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ models: {e}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º preview –º–æ–¥–µ–ª–∏
    if models.get('results'):
        model_id = models['results'][0]['id']
        print(f"\nüëÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º preview –¥–ª—è –º–æ–¥–µ–ª–∏ ID {model_id}...")
        try:
            response = client.post(f'/api/v1/dynamic-models/models/{model_id}/preview/')
            if response.status_code == 200:
                preview = response.json()
                print(f"‚úÖ Preview —Å–æ–∑–¥–∞–Ω:")
                print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {preview['model_info']['name']}")
                print(f"   ‚Ä¢ –ü–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–µ: {len(preview['form_preview'])}")
                print(f"   ‚Ä¢ –ö–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(preview['table_preview']['columns'])}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
                print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª–µ–π:")
                for field in preview['form_preview'][:3]:
                    required = "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ" if field['required'] else "–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ"
                    print(f"     - {field['label']} ({field['type']}) - {required}")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è preview: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ preview: {e}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint data...")
    try:
        response = client.get('/api/v1/dynamic-models/data/')
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data['results'])} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö")
            for entry in data['results'][:3]:
                print(f"   ‚Ä¢ {entry['dynamic_model_name']}: {entry['display_value']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ data: {e}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
    if models.get('results'):
        advantages_model = None
        for model in models['results']:
            if model['name'] == '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞':
                advantages_model = model
                break
        
        if advantages_model:
            print(f"\n‚ûï –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞'...")
            new_data = {
                'dynamic_model': advantages_model['id'],
                'data': {
                    'title': '–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ',
                    'description': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API',
                    'icon': 'fas fa-test',
                    'order': 99,
                    'is_featured': False
                },
                'is_published': True
            }
            
            try:
                response = client.post('/api/v1/dynamic-models/data/', new_data, format='json')
                if response.status_code == 201:
                    created_entry = response.json()
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {created_entry['display_value']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {response.status_code}")
                    if response.content:
                        print(f"   –î–µ—Ç–∞–ª–∏: {response.json()}")
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if models.get('results'):
        model_id = models['results'][0]['id']
        print(f"\nüì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ ID {model_id}...")
        try:
            response = client.get(f'/api/v1/dynamic-models/models/{model_id}/export_config/')
            if response.status_code == 200:
                config = response.json()
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞:")
                print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {config['name']}")
                print(f"   ‚Ä¢ –ü–æ–ª–µ–π: {len(config['fields_config']['fields'])}")
                print(f"   ‚Ä¢ –¢–∏–ø: {config['model_type']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –ø–æ–ª—è
                fields = config['fields_config']['fields'][:2]
                for field in fields:
                    print(f"     - {field['label']} ({field['type']})")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
    
    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã
    if models.get('results'):
        model_id = models['results'][0]['id']
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è –º–æ–¥–µ–ª–∏ ID {model_id}...")
        try:
            response = client.get(f'/api/v1/dynamic-models/data/schema/?dynamic_model={model_id}')
            if response.status_code == 200:
                schema = response.json()
                print(f"‚úÖ –°—Ö–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
                print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {schema['model_info']['name']}")
                print(f"   ‚Ä¢ –ü–æ–ª–µ–π: {len(schema['fields'])}")
                print(f"   ‚Ä¢ –¢–∏–ø –º–æ–¥–µ–ª–∏: {schema['model_info']['model_type']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ö–µ–º—ã: {e}")
    
    # 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º bulk —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if models.get('results'):
        team_model = None
        for model in models['results']:
            if model['name'] == '–ö–æ–º–∞–Ω–¥–∞':
                team_model = model
                break
        
        if team_model:
            print(f"\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º bulk —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ '–ö–æ–º–∞–Ω–¥–∞'...")
            bulk_data = {
                'dynamic_model': team_model['id'],
                'entries': [
                    {
                        'name': '–°–µ—Ä–≥–µ–π –¢–µ—Å—Ç–æ–≤',
                        'position': 'QA Engineer',
                        'bio': '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã 5 –ª–µ—Ç',
                        'email': 'sergey@company.com',
                        'department': 'development'
                    },
                    {
                        'name': '–ê–Ω–Ω–∞ –ö–æ–¥–æ–≤–∏—á',
                        'position': 'Backend Developer',
                        'bio': 'Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ Django',
                        'email': 'anna@company.com', 
                        'department': 'development'
                    }
                ],
                'is_published': True
            }
            
            try:
                response = client.post('/api/v1/dynamic-models/data/bulk_create/', bulk_data, format='json')
                if response.status_code == 200:
                    result = response.json()
                    print(f"‚úÖ Bulk —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: —Å–æ–∑–¥–∞–Ω–æ {result['created_count']} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ bulk —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
                    if response.content:
                        print(f"   –î–µ—Ç–∞–ª–∏: {response.json()}")
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ bulk —Å–æ–∑–¥–∞–Ω–∏–∏: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def show_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ú–û–î–ï–õ–ï–ô:")
    print("=" * 50)
    
    # –¢–∏–ø—ã –ø–æ–ª–µ–π
    field_types_count = DynamicFieldType.objects.count()
    print(f"üîß –¢–∏–ø–æ–≤ –ø–æ–ª–µ–π: {field_types_count}")
    
    # –ú–æ–¥–µ–ª–∏
    models_count = DynamicModel.objects.count()
    standalone_count = DynamicModel.objects.filter(model_type='standalone').count()
    extension_count = DynamicModel.objects.filter(model_type='extension').count()
    print(f"üèóÔ∏è  –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π: {models_count}")
    print(f"   ‚Ä¢ Standalone: {standalone_count}")
    print(f"   ‚Ä¢ Extensions: {extension_count}")
    
    # –î–∞–Ω–Ω—ã–µ
    data_count = DynamicModelData.objects.count()
    published_count = DynamicModelData.objects.filter(is_published=True).count()
    print(f"üìä –ó–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö: {data_count}")
    print(f"   ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {published_count}")
    
    # –ú–æ–¥–µ–ª–∏ –ø–æ —Å–∞–π—Ç–∞–º
    sites_with_models = Site.objects.filter(dynamic_models__isnull=False).distinct().count()
    print(f"üåê –°–∞–π—Ç–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏: {sites_with_models}")
    
    print("\nüìã –î–ï–¢–ê–õ–ò –ú–û–î–ï–õ–ï–ô:")
    for model in DynamicModel.objects.all():
        data_count = model.data_entries.filter(is_published=True).count()
        fields_count = len(model.fields_config.get('fields', []))
        print(f"   ‚Ä¢ {model.name} ({model.model_type}): {fields_count} –ø–æ–ª–µ–π, {data_count} –∑–∞–ø–∏—Å–µ–π")


if __name__ == '__main__':
    show_statistics()
    test_dynamic_models_api() 