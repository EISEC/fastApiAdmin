"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

from django.core.management.base import BaseCommand
from django.conf import settings
import requests
from urllib.parse import urljoin


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--api-url',
            type=str,
            default='https://admin.ifuw.ru/api/v1/',
            help='URL API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://admin.ifuw.ru/api/v1/)'
        )
        parser.add_argument(
            '--domains',
            type=str,
            nargs='+',
            default=['https://ifuw.ru', 'https://www.ifuw.ru', 'https://admin.ifuw.ru'],
            help='–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        )
        parser.add_argument(
            '--endpoint',
            type=str,
            default='sites/',
            help='Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: sites/)'
        )

    def handle(self, *args, **options):
        api_url = options['api_url']
        domains = options['domains']
        endpoint = options['endpoint']
        
        self.stdout.write(
            self.style.SUCCESS('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫')
        )
        self.stdout.write(f"API URL: {api_url}")
        self.stdout.write(f"Endpoint: {endpoint}")
        self.stdout.write(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –¥–æ–º–µ–Ω—ã: {', '.join(domains)}")
        self.stdout.write("=" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
        self.show_cors_settings()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω
        results = {}
        for domain in domains:
            results[domain] = self.test_domain_cors(api_url, endpoint, domain)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.show_results(results)

    def show_cors_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS"""
        self.stdout.write("\nüìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS:")
        self.stdout.write("-" * 40)
        
        cors_settings = {
            'CORS_ALLOW_ALL_ORIGINS': getattr(settings, 'CORS_ALLOW_ALL_ORIGINS', None),
            'CORS_ALLOWED_ORIGINS': getattr(settings, 'CORS_ALLOWED_ORIGINS', []),
            'CORS_ALLOWED_ORIGIN_REGEXES': getattr(settings, 'CORS_ALLOWED_ORIGIN_REGEXES', []),
            'CORS_ALLOW_CREDENTIALS': getattr(settings, 'CORS_ALLOW_CREDENTIALS', None),
            'CORS_ALLOW_METHODS': getattr(settings, 'CORS_ALLOW_METHODS', []),
            'CORS_ALLOW_HEADERS': getattr(settings, 'CORS_ALLOW_HEADERS', []),
            'ALLOWED_HOSTS': getattr(settings, 'ALLOWED_HOSTS', []),
        }
        
        for key, value in cors_settings.items():
            if isinstance(value, list) and len(value) > 3:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
                display_value = f"[{', '.join(value[:3])}, ... (+{len(value)-3} –µ—â–µ)]"
            else:
                display_value = str(value)
            self.stdout.write(f"  {key}: {display_value}")

    def test_domain_cors(self, api_url, endpoint, domain):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CORS –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞"""
        self.stdout.write(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞: {domain}")
        self.stdout.write("-" * 40)
        
        url = urljoin(api_url, endpoint)
        results = {'preflight': False, 'request': False, 'errors': []}
        
        # –¢–µ—Å—Ç preflight –∑–∞–ø—Ä–æ—Å–∞
        try:
            self.stdout.write("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ preflight –∑–∞–ø—Ä–æ—Å–∞...")
            response = requests.options(
                url,
                headers={
                    'Origin': domain,
                    'Access-Control-Request-Method': 'GET',
                    'Access-Control-Request-Headers': 'authorization,content-type',
                },
                timeout=10
            )
            
            self.stdout.write(f"   Status: {response.status_code}")
            
            cors_headers = {
                'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
                'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
                'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers'),
                'Access-Control-Allow-Credentials': response.headers.get('Access-Control-Allow-Credentials'),
            }
            
            for header, value in cors_headers.items():
                if value:
                    self.stdout.write(f"   {header}: {value}")
            
            if response.status_code == 200:
                self.stdout.write(self.style.SUCCESS("   ‚úÖ Preflight —É—Å–ø–µ—à–µ–Ω"))
                results['preflight'] = True
            else:
                self.stdout.write(self.style.ERROR(f"   ‚ùå Preflight –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}"))
                results['errors'].append(f"Preflight: {response.status_code}")
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"   ‚ùå –û—à–∏–±–∫–∞ preflight: {e}"))
            results['errors'].append(f"Preflight error: {e}")
        
        # –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        try:
            self.stdout.write("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
            response = requests.get(
                url,
                headers={
                    'Origin': domain,
                    'Content-Type': 'application/json',
                },
                timeout=10
            )
            
            self.stdout.write(f"   Status: {response.status_code}")
            cors_origin = response.headers.get('Access-Control-Allow-Origin')
            if cors_origin:
                self.stdout.write(f"   Access-Control-Allow-Origin: {cors_origin}")
            
            if response.status_code in [200, 401]:  # 401 –æ–∂–∏–¥–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.stdout.write(self.style.SUCCESS("   ‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω"))
                results['request'] = True
            else:
                self.stdout.write(self.style.ERROR(f"   ‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}"))
                results['errors'].append(f"Request: {response.status_code}")
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"))
            results['errors'].append(f"Request error: {e}")
        
        return results

    def show_results(self, results):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        self.stdout.write("\n" + "=" * 60)
        self.stdout.write("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        self.stdout.write("=" * 60)
        
        success_count = 0
        total_count = len(results)
        
        for domain, result in results.items():
            overall_success = result['preflight'] and result['request']
            if overall_success:
                status = self.style.SUCCESS("‚úÖ OK")
                success_count += 1
            else:
                status = self.style.ERROR("‚ùå FAIL")
            
            self.stdout.write(f"{domain}: {status}")
            
            if result['errors']:
                for error in result['errors']:
                    self.stdout.write(f"   - {error}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {success_count}/{total_count} –¥–æ–º–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if success_count < total_count:
            self.stdout.write(f"\n‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            self.stdout.write(f"   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CORS_ALLOWED_ORIGINS –≤ settings")
            self.stdout.write(f"   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ALLOWED_HOSTS –≤ settings") 
            self.stdout.write(f"   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ corsheaders.middleware.CorsMiddleware –ø–µ—Ä–≤—ã–π –≤ MIDDLEWARE")
            self.stdout.write(f"   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Django —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            self.stdout.write(f"   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ nginx/apache –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        else:
            self.stdout.write(self.style.SUCCESS(f"\nüéâ –í—Å–µ –¥–æ–º–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")) 