from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django.core.files.storage import default_storage
from django.conf import settings
from django.core.paginator import Paginator
import os
import uuid
import logging
import mimetypes
from datetime import datetime

logger = logging.getLogger(__name__)

# Create your views here.

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def upload_file_to_cloud(request):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
    """
    try:
        if 'file' not in request.FILES:
            return Response(
                {'detail': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        uploaded_file = request.FILES['file']
        site_id = request.POST.get('site_id')
        
        logger.info(f"üì§ Uploading file to cloud: {uploaded_file.name} (size: {uploaded_file.size})")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(uploaded_file.name)[1]
        unique_filename = f"{uuid.uuid4()}{file_extension}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è site_id
        if site_id:
            file_path = f"sites/{site_id}/uploads/{unique_filename}"
        else:
            file_path = f"uploads/{unique_filename}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        saved_path = default_storage.save(file_path, uploaded_file)
        file_url = default_storage.url(saved_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        content_type, _ = mimetypes.guess_type(uploaded_file.name)
        
        logger.info(f"‚úÖ File uploaded successfully: {file_url}")
        
        response_data = {
            'url': file_url,
            'path': saved_path,
            'name': uploaded_file.name,
            'size': uploaded_file.size,
            'type': content_type or 'application/octet-stream',
            'site_id': int(site_id) if site_id else None,
            'created_at': datetime.now().isoformat(),
        }
        
        return Response(response_data, status=status.HTTP_201_CREATED)
        
    except Exception as e:
        logger.error(f"‚ùå File upload failed: {str(e)}")
        return Response(
            {'detail': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def list_media_files(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –º–µ–¥–∏–∞-–±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å–∞–π—Ç—É
    """
    try:
        site_id = request.GET.get('site_id')
        file_type = request.GET.get('type', 'all')  # all, image, video, document
        search = request.GET.get('search', '')
        page = int(request.GET.get('page', 1))
        page_size = int(request.GET.get('page_size', 20))
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–∞–±–æ—Ç–∞ —Å –º–æ–¥–µ–ª—å—é MediaFile
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        mock_files = []
        
        # –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if site_id == '1' or not site_id:
            mock_files.extend([
                {
                    'id': '1',
                    'name': 'example-image.jpg',
                    'url': 'https://adminifuw.storage.yandexcloud.net/sites/1/uploads/example-image.jpg',
                    'type': 'image/jpeg',
                    'size': 245760,
                    'site_id': 1,
                    'site_name': '–ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç',
                    'created_at': '2024-06-22T10:30:00Z',
                    'thumbnail_url': 'https://adminifuw.storage.yandexcloud.net/sites/1/uploads/example-image.jpg'
                },
                {
                    'id': '2',
                    'name': 'document.pdf',
                    'url': 'https://adminifuw.storage.yandexcloud.net/sites/1/uploads/document.pdf',
                    'type': 'application/pdf',
                    'size': 1048576,
                    'site_id': 1,
                    'site_name': '–ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç',
                    'created_at': '2024-06-22T09:15:00Z',
                    'thumbnail_url': None
                }
            ])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
        if file_type != 'all':
            mock_files = [f for f in mock_files if f['type'].startswith(file_type)]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
        if search:
            mock_files = [f for f in mock_files if search.lower() in f['name'].lower()]
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        paginator = Paginator(mock_files, page_size)
        page_obj = paginator.get_page(page)
        
        return Response({
            'results': list(page_obj),
            'count': paginator.count,
            'num_pages': paginator.num_pages,
            'current_page': page,
            'has_next': page_obj.has_next(),
            'has_previous': page_obj.has_previous(),
        })
        
    except Exception as e:
        logger.error(f"‚ùå Failed to list media files: {str(e)}")
        return Response(
            {'detail': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def delete_media_file(request):
    """
    –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ URL
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        file_url = request.GET.get('url')
        
        if not file_url:
            return Response(
                {'detail': 'URL —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        logger.info(f"üóëÔ∏è Attempting to delete file: {file_url}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
        # URL –∏–º–µ–µ—Ç –≤–∏–¥: https://adminifuw.storage.yandexcloud.net/sites/1/uploads/filename.jpg
        # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å: sites/1/uploads/filename.jpg
        
        try:
            # –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            from urllib.parse import urlparse
            parsed_url = urlparse(file_url)
            file_path = parsed_url.path.lstrip('/')  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à
            
            logger.info(f"üîç Extracted file path: {file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —É–¥–∞–ª—è–µ–º
            if default_storage.exists(file_path):
                default_storage.delete(file_path)
                logger.info(f"‚úÖ File successfully deleted from cloud: {file_path}")
                
                return Response({
                    'detail': '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞',
                    'deleted_path': file_path
                }, status=status.HTTP_200_OK)
            else:
                logger.warning(f"‚ö†Ô∏è File not found in cloud storage: {file_path}")
                return Response({
                    'detail': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
                    'path': file_path
                }, status=status.HTTP_404_NOT_FOUND)
                
        except Exception as parse_error:
            logger.error(f"‚ùå Failed to parse file URL: {str(parse_error)}")
            return Response(
                {'detail': f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Ñ–∞–π–ª–∞: {str(parse_error)}'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
    except Exception as e:
        logger.error(f"‚ùå Failed to delete file: {str(e)}")
        return Response(
            {'detail': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def media_stats(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–¥–∏–∞-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ —Å–∞–π—Ç–∞–º
    """
    try:
        site_id = request.GET.get('site_id')
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        if site_id:
            stats = {
                'total_files': 2,
                'total_size': 1294336,  # –±–∞–π—Ç—ã
                'images_count': 1,
                'videos_count': 0,
                'documents_count': 1,
                'by_type': {
                    'image': {'count': 1, 'size': 245760},
                    'video': {'count': 0, 'size': 0},
                    'application': {'count': 1, 'size': 1048576},
                }
            }
        else:
            stats = {
                'total_files': 2,
                'total_size': 1294336,
                'images_count': 1,
                'videos_count': 0,
                'documents_count': 1,
                'by_site': {
                    '1': {'name': '–ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç', 'files': 2, 'size': 1294336},
                },
                'by_type': {
                    'image': {'count': 1, 'size': 245760},
                    'video': {'count': 0, 'size': 0},
                    'application': {'count': 1, 'size': 1048576},
                }
            }
        
        return Response(stats)
        
    except Exception as e:
        logger.error(f"‚ùå Failed to get media stats: {str(e)}")
        return Response(
            {'detail': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )
