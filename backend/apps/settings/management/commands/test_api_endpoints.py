from django.core.management.base import BaseCommand
from django.test import RequestFactory
from django.contrib.auth import get_user_model
from apps.settings.views import SettingViewSet, SocialNetworkSettingViewSet
from apps.settings.models import Setting, SocialNetworkSetting
from apps.accounts.models import Role
import json

User = get_user_model()

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoints –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'

    def handle(self, *args, **options):
        self.stdout.write('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...\n')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
        factory = RequestFactory()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–æ–ª—å author, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å
            try:
                role = Role.objects.get(name='author')
            except Role.DoesNotExist:
                role = Role.objects.first()  # –ë–µ—Ä–µ–º –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ä–æ–ª—å
                
            if not role:
                self.stdout.write('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ')
                return
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}')
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = User.objects.get_or_create(
            username='test_user',
            defaults={
                'email': 'test@example.com',
                'first_name': 'Test',
                'last_name': 'User',
                'role': role
            }
        )
        
        self.stdout.write(f'üë§ –ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username} (—Ä–æ–ª—å: {user.role.name})')
        
        # –¢–µ—Å—Ç 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ list_all
        self.stdout.write('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é /settings/settings/list_all/')
        try:
            request = factory.get('/settings/settings/list_all/')
            request.user = user
            
            viewset = SettingViewSet()
            viewset.format_kwarg = None
            viewset.request = request
            viewset.action = 'list_all'
            response = viewset.list_all(request)
            
            self.stdout.write(f'   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}')
            self.stdout.write(f'   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(response.data)}')
            
            if response.data:
                sample = response.data[0]
                self.stdout.write(f'   üìù –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {sample.get("key", "N/A")} = {sample.get("value", "N/A")}')
                
        except Exception as e:
            self.stdout.write(f'   ‚ùå –û—à–∏–±–∫–∞: {str(e)}')
        
        # –¢–µ—Å—Ç 2: –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ public_list  
        self.stdout.write('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é /settings/social-networks/public_list/')
        try:
            request = factory.get('/settings/social-networks/public_list/')
            request.user = user
            
            viewset = SocialNetworkSettingViewSet()
            viewset.format_kwarg = None
            viewset.request = request
            viewset.action = 'public_list'
            response = viewset.public_list(request)
            
            self.stdout.write(f'   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}')
            self.stdout.write(f'   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ü—Å–µ—Ç–µ–π: {len(response.data)}')
            
            if response.data:
                for network in response.data:
                    name = network.get('social_name', 'N/A')
                    url = network.get('url', 'N/A')
                    enabled = network.get('is_enabled', False)
                    icon = network.get('icon_name', 'N/A')
                    self.stdout.write(f'   üåê {name}: {url} (–∏–∫–æ–Ω–∫–∞: {icon}, –∞–∫—Ç–∏–≤–Ω–∞: {enabled})')
                    
        except Exception as e:
            self.stdout.write(f'   ‚ùå –û—à–∏–±–∫–∞: {str(e)}')
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        self.stdout.write('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        
        settings_count = Setting.objects.count()
        social_count = SocialNetworkSetting.objects.count()
        social_enabled_count = SocialNetworkSetting.objects.filter(is_enabled=True).count()
        
        self.stdout.write(f'   üìä –ù–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î: {settings_count}')
        self.stdout.write(f'   üìä –°–æ—Ü—Å–µ—Ç–µ–π –≤ –ë–î: {social_count}')
        self.stdout.write(f'   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π: {social_enabled_count}')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ—Ü—Å–µ—Ç–µ–π
        for network in SocialNetworkSetting.objects.all():
            self.stdout.write(f'   üåê {network.get_name_display()}: {network.url} (–ø–æ—Ä—è–¥–æ–∫: {network.order}, –∞–∫—Ç–∏–≤–Ω–∞: {network.is_enabled})')
        
        self.stdout.write('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!') 