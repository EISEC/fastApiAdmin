from django.core.management.base import BaseCommand
from django.urls import reverse
from django.test import Client
from django.contrib.auth import get_user_model
from apps.accounts.models import Role
from apps.settings.models import Setting

User = get_user_model()

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API endpoints'

    def handle(self, *args, **options):
        self.stdout.write('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é superuser
        try:
            superuser_role = Role.objects.get(name='superuser')
            test_user, created = User.objects.get_or_create(
                username='test_api_user',
                defaults={
                    'email': 'test@example.com',
                    'role': superuser_role,
                    'is_active': True
                }
            )
            if created:
                test_user.set_password('testpass123')
                test_user.save()
                self.stdout.write('‚úì –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
            return

        client = Client()
        
        # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        try:
            response = client.post('/api/v1/auth/token/', {
                'username': 'test_api_user',
                'password': 'testpass123'
            })
            if response.status_code == 200:
                token = response.json()['access']
                headers = {'HTTP_AUTHORIZATION': f'Bearer {token}'}
                self.stdout.write('‚úì –ü–æ–ª—É—á–µ–Ω JWT —Ç–æ–∫–µ–Ω')
            else:
                self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}')
                return
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}')
            return

        # –°–ø–∏—Å–æ–∫ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_endpoints = [
            # Auth endpoints
            ('GET', '/api/v1/auth/users/', '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
            ('GET', '/api/v1/auth/roles/', '–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π'),
            
            # Sites endpoints
            ('GET', '/api/v1/sites/', '–°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤'),
            
            # Posts endpoints
            ('GET', '/api/v1/posts/', '–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤'),
            ('GET', '/api/v1/posts/categories/', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤'),
            ('GET', '/api/v1/posts/tags/', '–¢–µ–≥–∏ –ø–æ—Å—Ç–æ–≤'),
            
            # Pages endpoints
            ('GET', '/api/v1/pages/', '–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü'),
            
            # Settings endpoints
            ('GET', '/api/v1/settings/', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π)'),
            ('GET', '/api/v1/settings/all/', '–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
            ('GET', '/api/v1/settings/categories/', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'),
            ('GET', '/api/v1/settings/groups/', '–ì—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫'),
            ('GET', '/api/v1/settings/templates/', '–®–∞–±–ª–æ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫'),
        ]

        results = []
        
        for method, url, description in test_endpoints:
            try:
                if method == 'GET':
                    response = client.get(url, **headers)
                else:
                    response = client.post(url, **headers)
                
                if response.status_code in [200, 201]:
                    self.stdout.write(f'‚úÖ {description}: {response.status_code}')
                    results.append((url, '‚úÖ', response.status_code))
                elif response.status_code == 404:
                    self.stdout.write(f'‚ùå {description}: 404 - Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    results.append((url, '‚ùå', '404 Not Found'))
                else:
                    self.stdout.write(f'‚ö†Ô∏è  {description}: {response.status_code}')
                    results.append((url, '‚ö†Ô∏è', response.status_code))
                    
            except Exception as e:
                self.stdout.write(f'üí• {description}: –û—à–∏–±–∫–∞ - {e}')
                results.append((url, 'üí•', str(e)))

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º POST endpoints
        post_tests = [
            # Bulk update settings
            ('PUT', '/api/v1/settings/bulk/', {
                'updates': [
                    {'key': 'site_name', 'value': 'Test Site Updated'}
                ]
            }, '–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫'),
        ]

        self.stdout.write('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST/PUT endpoints...')
        
        for method, url, data, description in post_tests:
            try:
                if method == 'POST':
                    response = client.post(url, data, content_type='application/json', **headers)
                elif method == 'PUT':
                    response = client.put(url, data, content_type='application/json', **headers)
                
                if response.status_code in [200, 201]:
                    self.stdout.write(f'‚úÖ {description}: {response.status_code}')
                else:
                    self.stdout.write(f'‚ùå {description}: {response.status_code} - {response.content.decode()[:100]}')
                    
            except Exception as e:
                self.stdout.write(f'üí• {description}: –û—à–∏–±–∫–∞ - {e}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î
        settings_count = Setting.objects.count()
        self.stdout.write(f'\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        self.stdout.write(f'   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î: {settings_count}')
        
        success_count = len([r for r in results if r[1] == '‚úÖ'])
        total_count = len(results)
        self.stdout.write(f'   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö endpoints: {success_count}/{total_count}')
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        self.stdout.write('\nüìã –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
        for url, status, code in results:
            self.stdout.write(f'   {status} {url} - {code}')
        
        if success_count == total_count:
            self.stdout.write(
                self.style.SUCCESS('\nüéâ –í—Å–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'\n‚ö†Ô∏è  {total_count - success_count} endpoints —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è')
            )
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if created:
            test_user.delete()
            self.stdout.write('üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω') 