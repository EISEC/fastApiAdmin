from django.core.management.base import BaseCommand
from django.db import models
from django.apps import apps
import os
import re


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ'

    def handle(self, *args, **options):
        self.stdout.write('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º...\n')
        
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
        self.check_field_usage(issues)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã DjangoFilterBackend
        self.check_filter_backend_usage(issues)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        self.check_model_fields(issues)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        self.check_api_consistency(issues)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not issues:
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:')
            )
            for i, issue in enumerate(issues, 1):
                self.stdout.write(f'   {i}. {issue}')

    def check_field_usage(self, issues):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤ –∫–æ–¥–µ"""
        self.stdout.write('üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ is_published –≤ Post –º–æ–¥–µ–ª–∏
        post_model = apps.get_model('posts', 'Post')
        post_fields = [f.name for f in post_model._meta.fields]
        
        if 'is_published' not in post_fields:
            # –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ is_published –≤ –∫–æ–¥–µ
            search_paths = [
                'backend/apps/posts/',
                'backend/apps/sites/',
            ]
            
            for path in search_paths:
                if os.path.exists(path):
                    for root, dirs, files in os.walk(path):
                        for file in files:
                            if file.endswith('.py'):
                                filepath = os.path.join(root, file)
                                try:
                                    with open(filepath, 'r', encoding='utf-8') as f:
                                        content = f.read()
                                        if 'is_published' in content and 'posts' in content:
                                            issues.append(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ is_published –≤ {filepath} –¥–ª—è Post –º–æ–¥–µ–ª–∏')
                                except Exception:
                                    pass

    def check_filter_backend_usage(self, issues):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã DjangoFilterBackend"""
        self.stdout.write('üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ DjangoFilterBackend...')
        
        search_paths = ['apps/']
        
        for path in search_paths:
            if os.path.exists(path):
                for root, dirs, files in os.walk(path):
                    for file in files:
                        if file.endswith('.py'):
                            filepath = os.path.join(root, file)
                            try:
                                with open(filepath, 'r', encoding='utf-8') as f:
                                    content = f.read()
                                    if 'django_filters.rest_framework' in content:
                                        issues.append(f'–ò–º–ø–æ—Ä—Ç DjangoFilterBackend –≤ {filepath}')
                                    if 'filterset_fields' in content:
                                        issues.append(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ filterset_fields –≤ {filepath}')
                            except Exception:
                                pass

    def check_model_fields(self, issues):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"""
        self.stdout.write('üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –º–æ–¥–µ–ª–µ–π...')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        our_apps = ['accounts', 'sites', 'posts', 'pages', 'settings', 'dynamic_models']
        
        for app_name in our_apps:
            try:
                app = apps.get_app_config(app_name)
                for model in app.get_models():
                    field_names = [f.name for f in model._meta.fields]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if 'created_at' not in field_names and hasattr(model, '_meta'):
                        if not model._meta.abstract:
                            issues.append(f'–ú–æ–¥–µ–ª—å {model.__name__} –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª—è created_at')
                    
                    if 'updated_at' not in field_names and hasattr(model, '_meta'):
                        if not model._meta.abstract:
                            issues.append(f'–ú–æ–¥–µ–ª—å {model.__name__} –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª—è updated_at')
                            
            except Exception as e:
                issues.append(f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {app_name}: {str(e)}')

    def check_api_consistency(self, issues):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å API"""
        self.stdout.write('üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        our_apps = ['sites', 'posts', 'pages', 'settings']
        
        for app_name in our_apps:
            try:
                app = apps.get_app_config(app_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ serializers.py
                serializers_path = os.path.join('apps', app_name, 'serializers.py')
                if not os.path.exists(serializers_path):
                    issues.append(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª serializers.py –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ {app_name}')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ views.py  
                views_path = os.path.join('apps', app_name, 'views.py')
                if not os.path.exists(views_path):
                    issues.append(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª views.py –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ {app_name}')
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ urls.py
                urls_path = os.path.join('apps', app_name, 'urls.py')
                if not os.path.exists(urls_path):
                    issues.append(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª urls.py –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ {app_name}')
                    
            except Exception as e:
                issues.append(f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –¥–ª—è {app_name}: {str(e)}')
                
        self.stdout.write('‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

    def add_arguments(self, parser):
        parser.add_argument(
            '--fix',
            action='store_true',
            help='–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
        ) 