from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse, path
from django.http import HttpResponse
from django.db.models import Q
from django.utils.safestring import mark_safe
from .models import Page


@admin.register(Page)
class PageAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    
    list_display = [
        'title', 'author', 'site', 'template_name', 'is_published', 
        'is_homepage', 'preview_link', 'created_at'
    ]
    list_filter = [
        'is_published', 'template_name', 'is_homepage', 'site', 
        'author__role', 'created_at'
    ]
    search_fields = [
        'title', 'meta_title', 'meta_description', 
        'author__email', 'site__name'
    ]
    readonly_fields = [
        'slug', 'compiled_css', 
        'created_at', 'updated_at', 'preview_link'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'template_name')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', {
            'fields': ('site', 'author', 'is_published', 'is_homepage')
        }),
        ('–ö–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('content', 'image')
        }),
        ('–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', {
            'fields': ('page_components',),
            'description': 'JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
        }),
        ('–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥', {
            'fields': ('compiled_css',),
            'classes': ('collapse',),
            'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π CSS'
        }),
        ('SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('meta_title', 'meta_description', 'meta_keywords'),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('preview_link',),
            'classes': ('collapse',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def preview_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"""
        if obj.pk:
            preview_url = reverse('admin:pages_page_preview', args=[obj.pk])
            return format_html(
                '<a href="{}" target="_blank" style="background: #007cba; color: white; padding: 5px 10px; '
                'text-decoration: none; border-radius: 3px; font-size: 12px;">üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</a>',
                preview_url
            )
        return "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    
    preview_link.short_description = '–ü—Ä–æ—Å–º–æ—Ç—Ä'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª—è–º"""
        queryset = super().get_queryset(request).select_related(
            'author', 'site', 'author__role'
        )
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª—è–º
        if request.user.is_superuser:
            return queryset
        elif hasattr(request.user, 'role'):
            if request.user.role.name == 'admin':
                # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —Å–∞–π—Ç–æ–≤
                return queryset.filter(site__owner=request.user)
            elif request.user.role.name == 'author':
                # –ê–≤—Ç–æ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
                return queryset.filter(
                    Q(author=request.user)
                ).distinct()
        
        return queryset.none()
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π –ø–æ —Ä–æ–ª—è–º"""
        if db_field.name == "site":
            if request.user.is_superuser:
                pass  # –°—É–ø–µ—Ä—é–∑–µ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ —Å–∞–π—Ç—ã
            elif hasattr(request.user, 'role'):
                if request.user.role.name == 'admin':
                    kwargs["queryset"] = kwargs["queryset"].filter(owner=request.user)
                elif request.user.role.name == 'author':
                    kwargs["queryset"] = kwargs["queryset"].filter(owner__role__name__in=['admin', 'superuser'])
                else:
                    kwargs["queryset"] = kwargs["queryset"].none()
        
        if db_field.name == "author":
            if not request.user.is_superuser:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∞–≤—Ç–æ—Ä–æ–≤
                kwargs["queryset"] = kwargs["queryset"].filter(
                    role__name__in=['admin', 'author']
                )
        
        return super().formfield_for_foreignkey(db_field, request, **kwargs)
    
    def has_change_permission(self, request, obj=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"""
        if obj is None:
            return True
        
        if request.user.is_superuser:
            return True
        
        if hasattr(request.user, 'role'):
            if request.user.role.name == 'admin':
                return obj.site.owner == request.user
            elif request.user.role.name == 'author':
                return obj.author == request.user
        
        return False
    
    def has_delete_permission(self, request, obj=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ"""
        if obj is None:
            return True
        
        if request.user.is_superuser:
            return True
        
        if hasattr(request.user, 'role'):
            if request.user.role.name == 'admin':
                return obj.site.owner == request.user
            elif request.user.role.name == 'author':
                return obj.author == request.user
        
        return False
    
    def has_add_permission(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"""
        if request.user.is_superuser:
            return True
        
        return hasattr(request.user, 'role') and request.user.role.name in ['admin', 'author']
    
    def save_model(self, request, obj, form, change):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"""
        if not change:  # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            obj.author = request.user
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        super().save_model(request, obj, form, change)
    
    def get_urls(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ URL –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        urls = super().get_urls()
        custom_urls = [
            path(
                '<int:page_id>/preview/',
                self.admin_site.admin_view(self.preview_page),
                name='pages_page_preview'
            ),
        ]
        return custom_urls + urls
    
    def preview_page(self, request, page_id):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            page = Page.objects.get(pk=page_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not self.has_view_permission(request, page):
                return HttpResponse("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", status=403)
            
            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            compiled_html = page.compile_components_to_html()
            
            html_content = f"""
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>{page.meta_title or page.title}</title>
                <meta name="description" content="{page.meta_description or ''}">
                <style>
                    body {{ margin: 0; padding: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }}
                    .preview-header {{ 
                        background: #007cba; color: white; padding: 10px 20px; margin: -20px -20px 20px; 
                        display: flex; justify-content: space-between; align-items: center;
                    }}
                    .preview-content {{ border: 1px solid #ddd; border-radius: 4px; overflow: hidden; }}
                    {page.compiled_css or ''}
                </style>
            </head>
            <body>
                <div class="preview-header">
                    <h3 style="margin: 0;">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: {page.title}</h3>
                    <small>–°—Ç–∞—Ç—É—Å: {'–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' if page.is_published else '–ß–µ—Ä–Ω–æ–≤–∏–∫'}</small>
                </div>
                <div class="preview-content">
                    {compiled_html or '<p style="padding: 20px; color: #666;">–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</p>'}
                </div>
            </body>
            </html>
            """
            
            return HttpResponse(html_content, content_type='text/html')
            
        except Page.DoesNotExist:
            return HttpResponse("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", status=404)
    
    actions = ['make_published', 'make_draft', 'set_as_home']
    
    def make_published(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
        updated = queryset.update(is_published=True)
        self.message_user(request, f'{updated} —Å—Ç—Ä–∞–Ω–∏—Ü –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã.')
    
    make_published.short_description = "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
    
    def make_draft(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ–µ —Å–Ω—è—Ç–∏–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        updated = queryset.update(is_published=False)
        self.message_user(request, f'{updated} —Å—Ç—Ä–∞–Ω–∏—Ü –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.')
    
    make_draft.short_description = "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"
    
    def set_as_home(self, request, queryset):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if queryset.count() > 1:
            self.message_user(request, '–ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞ —Ä–∞–∑.', level='error')
            return
        
        page = queryset.first()
        if page:
            # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞
            Page.objects.filter(site=page.site, is_homepage=True).update(is_homepage=False)
            page.is_homepage = True
            page.save()
            self.message_user(request, f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ "{page.title}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –≥–ª–∞–≤–Ω–∞—è.')
    
    set_as_home.short_description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"
